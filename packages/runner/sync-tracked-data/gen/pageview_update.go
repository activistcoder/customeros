// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openline-ai/openline-customer-os/packages/runner/sync-tracked-data/gen/pageview"
	"github.com/openline-ai/openline-customer-os/packages/runner/sync-tracked-data/gen/predicate"
)

// PageViewUpdate is the builder for updating PageView entities.
type PageViewUpdate struct {
	config
	hooks    []Hook
	mutation *PageViewMutation
}

// Where appends a list predicates to the PageViewUpdate builder.
func (pvu *PageViewUpdate) Where(ps ...predicate.PageView) *PageViewUpdate {
	pvu.mutation.Where(ps...)
	return pvu
}

// SetAppID sets the "app_id" field.
func (pvu *PageViewUpdate) SetAppID(s string) *PageViewUpdate {
	pvu.mutation.SetAppID(s)
	return pvu
}

// SetNameTracker sets the "name_tracker" field.
func (pvu *PageViewUpdate) SetNameTracker(s string) *PageViewUpdate {
	pvu.mutation.SetNameTracker(s)
	return pvu
}

// SetTenant sets the "tenant" field.
func (pvu *PageViewUpdate) SetTenant(s string) *PageViewUpdate {
	pvu.mutation.SetTenant(s)
	return pvu
}

// SetPageViewID sets the "page_view_id" field.
func (pvu *PageViewUpdate) SetPageViewID(s string) *PageViewUpdate {
	pvu.mutation.SetPageViewID(s)
	return pvu
}

// SetEventID sets the "event_id" field.
func (pvu *PageViewUpdate) SetEventID(s string) *PageViewUpdate {
	pvu.mutation.SetEventID(s)
	return pvu
}

// SetSyncedToCustomerOs sets the "synced_to_customer_os" field.
func (pvu *PageViewUpdate) SetSyncedToCustomerOs(b bool) *PageViewUpdate {
	pvu.mutation.SetSyncedToCustomerOs(b)
	return pvu
}

// SetStartTstamp sets the "start_tstamp" field.
func (pvu *PageViewUpdate) SetStartTstamp(t time.Time) *PageViewUpdate {
	pvu.mutation.SetStartTstamp(t)
	return pvu
}

// SetEndTstamp sets the "end_tstamp" field.
func (pvu *PageViewUpdate) SetEndTstamp(t time.Time) *PageViewUpdate {
	pvu.mutation.SetEndTstamp(t)
	return pvu
}

// SetVisitorID sets the "visitor_id" field.
func (pvu *PageViewUpdate) SetVisitorID(s string) *PageViewUpdate {
	pvu.mutation.SetVisitorID(s)
	return pvu
}

// SetNillableVisitorID sets the "visitor_id" field if the given value is not nil.
func (pvu *PageViewUpdate) SetNillableVisitorID(s *string) *PageViewUpdate {
	if s != nil {
		pvu.SetVisitorID(*s)
	}
	return pvu
}

// ClearVisitorID clears the value of the "visitor_id" field.
func (pvu *PageViewUpdate) ClearVisitorID() *PageViewUpdate {
	pvu.mutation.ClearVisitorID()
	return pvu
}

// SetCustomerOsContactID sets the "customer_os_contact_id" field.
func (pvu *PageViewUpdate) SetCustomerOsContactID(s string) *PageViewUpdate {
	pvu.mutation.SetCustomerOsContactID(s)
	return pvu
}

// SetNillableCustomerOsContactID sets the "customer_os_contact_id" field if the given value is not nil.
func (pvu *PageViewUpdate) SetNillableCustomerOsContactID(s *string) *PageViewUpdate {
	if s != nil {
		pvu.SetCustomerOsContactID(*s)
	}
	return pvu
}

// ClearCustomerOsContactID clears the value of the "customer_os_contact_id" field.
func (pvu *PageViewUpdate) ClearCustomerOsContactID() *PageViewUpdate {
	pvu.mutation.ClearCustomerOsContactID()
	return pvu
}

// SetDomainUserid sets the "domain_userid" field.
func (pvu *PageViewUpdate) SetDomainUserid(s string) *PageViewUpdate {
	pvu.mutation.SetDomainUserid(s)
	return pvu
}

// SetNetworkUserid sets the "network_userid" field.
func (pvu *PageViewUpdate) SetNetworkUserid(s string) *PageViewUpdate {
	pvu.mutation.SetNetworkUserid(s)
	return pvu
}

// SetDomainSessionid sets the "domain_sessionid" field.
func (pvu *PageViewUpdate) SetDomainSessionid(i int) *PageViewUpdate {
	pvu.mutation.ResetDomainSessionid()
	pvu.mutation.SetDomainSessionid(i)
	return pvu
}

// AddDomainSessionid adds i to the "domain_sessionid" field.
func (pvu *PageViewUpdate) AddDomainSessionid(i int) *PageViewUpdate {
	pvu.mutation.AddDomainSessionid(i)
	return pvu
}

// SetDomainSessionidx sets the "domain_sessionidx" field.
func (pvu *PageViewUpdate) SetDomainSessionidx(i int) *PageViewUpdate {
	pvu.mutation.ResetDomainSessionidx()
	pvu.mutation.SetDomainSessionidx(i)
	return pvu
}

// AddDomainSessionidx adds i to the "domain_sessionidx" field.
func (pvu *PageViewUpdate) AddDomainSessionidx(i int) *PageViewUpdate {
	pvu.mutation.AddDomainSessionidx(i)
	return pvu
}

// SetPageViewsInSession sets the "page_views_in_session" field.
func (pvu *PageViewUpdate) SetPageViewsInSession(i int) *PageViewUpdate {
	pvu.mutation.ResetPageViewsInSession()
	pvu.mutation.SetPageViewsInSession(i)
	return pvu
}

// AddPageViewsInSession adds i to the "page_views_in_session" field.
func (pvu *PageViewUpdate) AddPageViewsInSession(i int) *PageViewUpdate {
	pvu.mutation.AddPageViewsInSession(i)
	return pvu
}

// SetPageViewInSessionIndex sets the "page_view_in_session_index" field.
func (pvu *PageViewUpdate) SetPageViewInSessionIndex(i int) *PageViewUpdate {
	pvu.mutation.ResetPageViewInSessionIndex()
	pvu.mutation.SetPageViewInSessionIndex(i)
	return pvu
}

// AddPageViewInSessionIndex adds i to the "page_view_in_session_index" field.
func (pvu *PageViewUpdate) AddPageViewInSessionIndex(i int) *PageViewUpdate {
	pvu.mutation.AddPageViewInSessionIndex(i)
	return pvu
}

// SetEngagedTimeInS sets the "engaged_time_in_s" field.
func (pvu *PageViewUpdate) SetEngagedTimeInS(i int) *PageViewUpdate {
	pvu.mutation.ResetEngagedTimeInS()
	pvu.mutation.SetEngagedTimeInS(i)
	return pvu
}

// AddEngagedTimeInS adds i to the "engaged_time_in_s" field.
func (pvu *PageViewUpdate) AddEngagedTimeInS(i int) *PageViewUpdate {
	pvu.mutation.AddEngagedTimeInS(i)
	return pvu
}

// SetPageURL sets the "page_url" field.
func (pvu *PageViewUpdate) SetPageURL(s string) *PageViewUpdate {
	pvu.mutation.SetPageURL(s)
	return pvu
}

// SetPageTitle sets the "page_title" field.
func (pvu *PageViewUpdate) SetPageTitle(s string) *PageViewUpdate {
	pvu.mutation.SetPageTitle(s)
	return pvu
}

// Mutation returns the PageViewMutation object of the builder.
func (pvu *PageViewUpdate) Mutation() *PageViewMutation {
	return pvu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pvu *PageViewUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pvu.hooks) == 0 {
		affected, err = pvu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PageViewMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pvu.mutation = mutation
			affected, err = pvu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pvu.hooks) - 1; i >= 0; i-- {
			if pvu.hooks[i] == nil {
				return 0, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = pvu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pvu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pvu *PageViewUpdate) SaveX(ctx context.Context) int {
	affected, err := pvu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pvu *PageViewUpdate) Exec(ctx context.Context) error {
	_, err := pvu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pvu *PageViewUpdate) ExecX(ctx context.Context) {
	if err := pvu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pvu *PageViewUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pageview.Table,
			Columns: pageview.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: pageview.FieldID,
			},
		},
	}
	if ps := pvu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pvu.mutation.AppID(); ok {
		_spec.SetField(pageview.FieldAppID, field.TypeString, value)
	}
	if value, ok := pvu.mutation.NameTracker(); ok {
		_spec.SetField(pageview.FieldNameTracker, field.TypeString, value)
	}
	if value, ok := pvu.mutation.Tenant(); ok {
		_spec.SetField(pageview.FieldTenant, field.TypeString, value)
	}
	if value, ok := pvu.mutation.PageViewID(); ok {
		_spec.SetField(pageview.FieldPageViewID, field.TypeString, value)
	}
	if value, ok := pvu.mutation.EventID(); ok {
		_spec.SetField(pageview.FieldEventID, field.TypeString, value)
	}
	if value, ok := pvu.mutation.SyncedToCustomerOs(); ok {
		_spec.SetField(pageview.FieldSyncedToCustomerOs, field.TypeBool, value)
	}
	if value, ok := pvu.mutation.StartTstamp(); ok {
		_spec.SetField(pageview.FieldStartTstamp, field.TypeTime, value)
	}
	if value, ok := pvu.mutation.EndTstamp(); ok {
		_spec.SetField(pageview.FieldEndTstamp, field.TypeTime, value)
	}
	if value, ok := pvu.mutation.VisitorID(); ok {
		_spec.SetField(pageview.FieldVisitorID, field.TypeString, value)
	}
	if pvu.mutation.VisitorIDCleared() {
		_spec.ClearField(pageview.FieldVisitorID, field.TypeString)
	}
	if value, ok := pvu.mutation.CustomerOsContactID(); ok {
		_spec.SetField(pageview.FieldCustomerOsContactID, field.TypeString, value)
	}
	if pvu.mutation.CustomerOsContactIDCleared() {
		_spec.ClearField(pageview.FieldCustomerOsContactID, field.TypeString)
	}
	if value, ok := pvu.mutation.DomainUserid(); ok {
		_spec.SetField(pageview.FieldDomainUserid, field.TypeString, value)
	}
	if value, ok := pvu.mutation.NetworkUserid(); ok {
		_spec.SetField(pageview.FieldNetworkUserid, field.TypeString, value)
	}
	if value, ok := pvu.mutation.DomainSessionid(); ok {
		_spec.SetField(pageview.FieldDomainSessionid, field.TypeInt, value)
	}
	if value, ok := pvu.mutation.AddedDomainSessionid(); ok {
		_spec.AddField(pageview.FieldDomainSessionid, field.TypeInt, value)
	}
	if value, ok := pvu.mutation.DomainSessionidx(); ok {
		_spec.SetField(pageview.FieldDomainSessionidx, field.TypeInt, value)
	}
	if value, ok := pvu.mutation.AddedDomainSessionidx(); ok {
		_spec.AddField(pageview.FieldDomainSessionidx, field.TypeInt, value)
	}
	if value, ok := pvu.mutation.PageViewsInSession(); ok {
		_spec.SetField(pageview.FieldPageViewsInSession, field.TypeInt, value)
	}
	if value, ok := pvu.mutation.AddedPageViewsInSession(); ok {
		_spec.AddField(pageview.FieldPageViewsInSession, field.TypeInt, value)
	}
	if value, ok := pvu.mutation.PageViewInSessionIndex(); ok {
		_spec.SetField(pageview.FieldPageViewInSessionIndex, field.TypeInt, value)
	}
	if value, ok := pvu.mutation.AddedPageViewInSessionIndex(); ok {
		_spec.AddField(pageview.FieldPageViewInSessionIndex, field.TypeInt, value)
	}
	if value, ok := pvu.mutation.EngagedTimeInS(); ok {
		_spec.SetField(pageview.FieldEngagedTimeInS, field.TypeInt, value)
	}
	if value, ok := pvu.mutation.AddedEngagedTimeInS(); ok {
		_spec.AddField(pageview.FieldEngagedTimeInS, field.TypeInt, value)
	}
	if value, ok := pvu.mutation.PageURL(); ok {
		_spec.SetField(pageview.FieldPageURL, field.TypeString, value)
	}
	if value, ok := pvu.mutation.PageTitle(); ok {
		_spec.SetField(pageview.FieldPageTitle, field.TypeString, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pvu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pageview.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// PageViewUpdateOne is the builder for updating a single PageView entity.
type PageViewUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PageViewMutation
}

// SetAppID sets the "app_id" field.
func (pvuo *PageViewUpdateOne) SetAppID(s string) *PageViewUpdateOne {
	pvuo.mutation.SetAppID(s)
	return pvuo
}

// SetNameTracker sets the "name_tracker" field.
func (pvuo *PageViewUpdateOne) SetNameTracker(s string) *PageViewUpdateOne {
	pvuo.mutation.SetNameTracker(s)
	return pvuo
}

// SetTenant sets the "tenant" field.
func (pvuo *PageViewUpdateOne) SetTenant(s string) *PageViewUpdateOne {
	pvuo.mutation.SetTenant(s)
	return pvuo
}

// SetPageViewID sets the "page_view_id" field.
func (pvuo *PageViewUpdateOne) SetPageViewID(s string) *PageViewUpdateOne {
	pvuo.mutation.SetPageViewID(s)
	return pvuo
}

// SetEventID sets the "event_id" field.
func (pvuo *PageViewUpdateOne) SetEventID(s string) *PageViewUpdateOne {
	pvuo.mutation.SetEventID(s)
	return pvuo
}

// SetSyncedToCustomerOs sets the "synced_to_customer_os" field.
func (pvuo *PageViewUpdateOne) SetSyncedToCustomerOs(b bool) *PageViewUpdateOne {
	pvuo.mutation.SetSyncedToCustomerOs(b)
	return pvuo
}

// SetStartTstamp sets the "start_tstamp" field.
func (pvuo *PageViewUpdateOne) SetStartTstamp(t time.Time) *PageViewUpdateOne {
	pvuo.mutation.SetStartTstamp(t)
	return pvuo
}

// SetEndTstamp sets the "end_tstamp" field.
func (pvuo *PageViewUpdateOne) SetEndTstamp(t time.Time) *PageViewUpdateOne {
	pvuo.mutation.SetEndTstamp(t)
	return pvuo
}

// SetVisitorID sets the "visitor_id" field.
func (pvuo *PageViewUpdateOne) SetVisitorID(s string) *PageViewUpdateOne {
	pvuo.mutation.SetVisitorID(s)
	return pvuo
}

// SetNillableVisitorID sets the "visitor_id" field if the given value is not nil.
func (pvuo *PageViewUpdateOne) SetNillableVisitorID(s *string) *PageViewUpdateOne {
	if s != nil {
		pvuo.SetVisitorID(*s)
	}
	return pvuo
}

// ClearVisitorID clears the value of the "visitor_id" field.
func (pvuo *PageViewUpdateOne) ClearVisitorID() *PageViewUpdateOne {
	pvuo.mutation.ClearVisitorID()
	return pvuo
}

// SetCustomerOsContactID sets the "customer_os_contact_id" field.
func (pvuo *PageViewUpdateOne) SetCustomerOsContactID(s string) *PageViewUpdateOne {
	pvuo.mutation.SetCustomerOsContactID(s)
	return pvuo
}

// SetNillableCustomerOsContactID sets the "customer_os_contact_id" field if the given value is not nil.
func (pvuo *PageViewUpdateOne) SetNillableCustomerOsContactID(s *string) *PageViewUpdateOne {
	if s != nil {
		pvuo.SetCustomerOsContactID(*s)
	}
	return pvuo
}

// ClearCustomerOsContactID clears the value of the "customer_os_contact_id" field.
func (pvuo *PageViewUpdateOne) ClearCustomerOsContactID() *PageViewUpdateOne {
	pvuo.mutation.ClearCustomerOsContactID()
	return pvuo
}

// SetDomainUserid sets the "domain_userid" field.
func (pvuo *PageViewUpdateOne) SetDomainUserid(s string) *PageViewUpdateOne {
	pvuo.mutation.SetDomainUserid(s)
	return pvuo
}

// SetNetworkUserid sets the "network_userid" field.
func (pvuo *PageViewUpdateOne) SetNetworkUserid(s string) *PageViewUpdateOne {
	pvuo.mutation.SetNetworkUserid(s)
	return pvuo
}

// SetDomainSessionid sets the "domain_sessionid" field.
func (pvuo *PageViewUpdateOne) SetDomainSessionid(i int) *PageViewUpdateOne {
	pvuo.mutation.ResetDomainSessionid()
	pvuo.mutation.SetDomainSessionid(i)
	return pvuo
}

// AddDomainSessionid adds i to the "domain_sessionid" field.
func (pvuo *PageViewUpdateOne) AddDomainSessionid(i int) *PageViewUpdateOne {
	pvuo.mutation.AddDomainSessionid(i)
	return pvuo
}

// SetDomainSessionidx sets the "domain_sessionidx" field.
func (pvuo *PageViewUpdateOne) SetDomainSessionidx(i int) *PageViewUpdateOne {
	pvuo.mutation.ResetDomainSessionidx()
	pvuo.mutation.SetDomainSessionidx(i)
	return pvuo
}

// AddDomainSessionidx adds i to the "domain_sessionidx" field.
func (pvuo *PageViewUpdateOne) AddDomainSessionidx(i int) *PageViewUpdateOne {
	pvuo.mutation.AddDomainSessionidx(i)
	return pvuo
}

// SetPageViewsInSession sets the "page_views_in_session" field.
func (pvuo *PageViewUpdateOne) SetPageViewsInSession(i int) *PageViewUpdateOne {
	pvuo.mutation.ResetPageViewsInSession()
	pvuo.mutation.SetPageViewsInSession(i)
	return pvuo
}

// AddPageViewsInSession adds i to the "page_views_in_session" field.
func (pvuo *PageViewUpdateOne) AddPageViewsInSession(i int) *PageViewUpdateOne {
	pvuo.mutation.AddPageViewsInSession(i)
	return pvuo
}

// SetPageViewInSessionIndex sets the "page_view_in_session_index" field.
func (pvuo *PageViewUpdateOne) SetPageViewInSessionIndex(i int) *PageViewUpdateOne {
	pvuo.mutation.ResetPageViewInSessionIndex()
	pvuo.mutation.SetPageViewInSessionIndex(i)
	return pvuo
}

// AddPageViewInSessionIndex adds i to the "page_view_in_session_index" field.
func (pvuo *PageViewUpdateOne) AddPageViewInSessionIndex(i int) *PageViewUpdateOne {
	pvuo.mutation.AddPageViewInSessionIndex(i)
	return pvuo
}

// SetEngagedTimeInS sets the "engaged_time_in_s" field.
func (pvuo *PageViewUpdateOne) SetEngagedTimeInS(i int) *PageViewUpdateOne {
	pvuo.mutation.ResetEngagedTimeInS()
	pvuo.mutation.SetEngagedTimeInS(i)
	return pvuo
}

// AddEngagedTimeInS adds i to the "engaged_time_in_s" field.
func (pvuo *PageViewUpdateOne) AddEngagedTimeInS(i int) *PageViewUpdateOne {
	pvuo.mutation.AddEngagedTimeInS(i)
	return pvuo
}

// SetPageURL sets the "page_url" field.
func (pvuo *PageViewUpdateOne) SetPageURL(s string) *PageViewUpdateOne {
	pvuo.mutation.SetPageURL(s)
	return pvuo
}

// SetPageTitle sets the "page_title" field.
func (pvuo *PageViewUpdateOne) SetPageTitle(s string) *PageViewUpdateOne {
	pvuo.mutation.SetPageTitle(s)
	return pvuo
}

// Mutation returns the PageViewMutation object of the builder.
func (pvuo *PageViewUpdateOne) Mutation() *PageViewMutation {
	return pvuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pvuo *PageViewUpdateOne) Select(field string, fields ...string) *PageViewUpdateOne {
	pvuo.fields = append([]string{field}, fields...)
	return pvuo
}

// Save executes the query and returns the updated PageView entity.
func (pvuo *PageViewUpdateOne) Save(ctx context.Context) (*PageView, error) {
	var (
		err  error
		node *PageView
	)
	if len(pvuo.hooks) == 0 {
		node, err = pvuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PageViewMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			pvuo.mutation = mutation
			node, err = pvuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pvuo.hooks) - 1; i >= 0; i-- {
			if pvuo.hooks[i] == nil {
				return nil, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = pvuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, pvuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*PageView)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PageViewMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pvuo *PageViewUpdateOne) SaveX(ctx context.Context) *PageView {
	node, err := pvuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pvuo *PageViewUpdateOne) Exec(ctx context.Context) error {
	_, err := pvuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pvuo *PageViewUpdateOne) ExecX(ctx context.Context) {
	if err := pvuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (pvuo *PageViewUpdateOne) sqlSave(ctx context.Context) (_node *PageView, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   pageview.Table,
			Columns: pageview.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: pageview.FieldID,
			},
		},
	}
	id, ok := pvuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "PageView.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pvuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, pageview.FieldID)
		for _, f := range fields {
			if !pageview.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != pageview.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pvuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pvuo.mutation.AppID(); ok {
		_spec.SetField(pageview.FieldAppID, field.TypeString, value)
	}
	if value, ok := pvuo.mutation.NameTracker(); ok {
		_spec.SetField(pageview.FieldNameTracker, field.TypeString, value)
	}
	if value, ok := pvuo.mutation.Tenant(); ok {
		_spec.SetField(pageview.FieldTenant, field.TypeString, value)
	}
	if value, ok := pvuo.mutation.PageViewID(); ok {
		_spec.SetField(pageview.FieldPageViewID, field.TypeString, value)
	}
	if value, ok := pvuo.mutation.EventID(); ok {
		_spec.SetField(pageview.FieldEventID, field.TypeString, value)
	}
	if value, ok := pvuo.mutation.SyncedToCustomerOs(); ok {
		_spec.SetField(pageview.FieldSyncedToCustomerOs, field.TypeBool, value)
	}
	if value, ok := pvuo.mutation.StartTstamp(); ok {
		_spec.SetField(pageview.FieldStartTstamp, field.TypeTime, value)
	}
	if value, ok := pvuo.mutation.EndTstamp(); ok {
		_spec.SetField(pageview.FieldEndTstamp, field.TypeTime, value)
	}
	if value, ok := pvuo.mutation.VisitorID(); ok {
		_spec.SetField(pageview.FieldVisitorID, field.TypeString, value)
	}
	if pvuo.mutation.VisitorIDCleared() {
		_spec.ClearField(pageview.FieldVisitorID, field.TypeString)
	}
	if value, ok := pvuo.mutation.CustomerOsContactID(); ok {
		_spec.SetField(pageview.FieldCustomerOsContactID, field.TypeString, value)
	}
	if pvuo.mutation.CustomerOsContactIDCleared() {
		_spec.ClearField(pageview.FieldCustomerOsContactID, field.TypeString)
	}
	if value, ok := pvuo.mutation.DomainUserid(); ok {
		_spec.SetField(pageview.FieldDomainUserid, field.TypeString, value)
	}
	if value, ok := pvuo.mutation.NetworkUserid(); ok {
		_spec.SetField(pageview.FieldNetworkUserid, field.TypeString, value)
	}
	if value, ok := pvuo.mutation.DomainSessionid(); ok {
		_spec.SetField(pageview.FieldDomainSessionid, field.TypeInt, value)
	}
	if value, ok := pvuo.mutation.AddedDomainSessionid(); ok {
		_spec.AddField(pageview.FieldDomainSessionid, field.TypeInt, value)
	}
	if value, ok := pvuo.mutation.DomainSessionidx(); ok {
		_spec.SetField(pageview.FieldDomainSessionidx, field.TypeInt, value)
	}
	if value, ok := pvuo.mutation.AddedDomainSessionidx(); ok {
		_spec.AddField(pageview.FieldDomainSessionidx, field.TypeInt, value)
	}
	if value, ok := pvuo.mutation.PageViewsInSession(); ok {
		_spec.SetField(pageview.FieldPageViewsInSession, field.TypeInt, value)
	}
	if value, ok := pvuo.mutation.AddedPageViewsInSession(); ok {
		_spec.AddField(pageview.FieldPageViewsInSession, field.TypeInt, value)
	}
	if value, ok := pvuo.mutation.PageViewInSessionIndex(); ok {
		_spec.SetField(pageview.FieldPageViewInSessionIndex, field.TypeInt, value)
	}
	if value, ok := pvuo.mutation.AddedPageViewInSessionIndex(); ok {
		_spec.AddField(pageview.FieldPageViewInSessionIndex, field.TypeInt, value)
	}
	if value, ok := pvuo.mutation.EngagedTimeInS(); ok {
		_spec.SetField(pageview.FieldEngagedTimeInS, field.TypeInt, value)
	}
	if value, ok := pvuo.mutation.AddedEngagedTimeInS(); ok {
		_spec.AddField(pageview.FieldEngagedTimeInS, field.TypeInt, value)
	}
	if value, ok := pvuo.mutation.PageURL(); ok {
		_spec.SetField(pageview.FieldPageURL, field.TypeString, value)
	}
	if value, ok := pvuo.mutation.PageTitle(); ok {
		_spec.SetField(pageview.FieldPageTitle, field.TypeString, value)
	}
	_node = &PageView{config: pvuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pvuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{pageview.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
