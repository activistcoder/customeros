// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openline-ai/openline-customer-os/packages/runner/sync-tracked-data/gen/pageview"
)

// PageViewCreate is the builder for creating a PageView entity.
type PageViewCreate struct {
	config
	mutation *PageViewMutation
	hooks    []Hook
}

// SetAppID sets the "app_id" field.
func (pvc *PageViewCreate) SetAppID(s string) *PageViewCreate {
	pvc.mutation.SetAppID(s)
	return pvc
}

// SetNameTracker sets the "name_tracker" field.
func (pvc *PageViewCreate) SetNameTracker(s string) *PageViewCreate {
	pvc.mutation.SetNameTracker(s)
	return pvc
}

// SetTenant sets the "tenant" field.
func (pvc *PageViewCreate) SetTenant(s string) *PageViewCreate {
	pvc.mutation.SetTenant(s)
	return pvc
}

// SetPageViewID sets the "page_view_id" field.
func (pvc *PageViewCreate) SetPageViewID(s string) *PageViewCreate {
	pvc.mutation.SetPageViewID(s)
	return pvc
}

// SetEventID sets the "event_id" field.
func (pvc *PageViewCreate) SetEventID(s string) *PageViewCreate {
	pvc.mutation.SetEventID(s)
	return pvc
}

// SetSyncedToCustomerOs sets the "synced_to_customer_os" field.
func (pvc *PageViewCreate) SetSyncedToCustomerOs(b bool) *PageViewCreate {
	pvc.mutation.SetSyncedToCustomerOs(b)
	return pvc
}

// SetStartTstamp sets the "start_tstamp" field.
func (pvc *PageViewCreate) SetStartTstamp(t time.Time) *PageViewCreate {
	pvc.mutation.SetStartTstamp(t)
	return pvc
}

// SetEndTstamp sets the "end_tstamp" field.
func (pvc *PageViewCreate) SetEndTstamp(t time.Time) *PageViewCreate {
	pvc.mutation.SetEndTstamp(t)
	return pvc
}

// SetVisitorID sets the "visitor_id" field.
func (pvc *PageViewCreate) SetVisitorID(s string) *PageViewCreate {
	pvc.mutation.SetVisitorID(s)
	return pvc
}

// SetNillableVisitorID sets the "visitor_id" field if the given value is not nil.
func (pvc *PageViewCreate) SetNillableVisitorID(s *string) *PageViewCreate {
	if s != nil {
		pvc.SetVisitorID(*s)
	}
	return pvc
}

// SetCustomerOsContactID sets the "customer_os_contact_id" field.
func (pvc *PageViewCreate) SetCustomerOsContactID(s string) *PageViewCreate {
	pvc.mutation.SetCustomerOsContactID(s)
	return pvc
}

// SetNillableCustomerOsContactID sets the "customer_os_contact_id" field if the given value is not nil.
func (pvc *PageViewCreate) SetNillableCustomerOsContactID(s *string) *PageViewCreate {
	if s != nil {
		pvc.SetCustomerOsContactID(*s)
	}
	return pvc
}

// SetDomainUserid sets the "domain_userid" field.
func (pvc *PageViewCreate) SetDomainUserid(s string) *PageViewCreate {
	pvc.mutation.SetDomainUserid(s)
	return pvc
}

// SetNetworkUserid sets the "network_userid" field.
func (pvc *PageViewCreate) SetNetworkUserid(s string) *PageViewCreate {
	pvc.mutation.SetNetworkUserid(s)
	return pvc
}

// SetDomainSessionid sets the "domain_sessionid" field.
func (pvc *PageViewCreate) SetDomainSessionid(i int) *PageViewCreate {
	pvc.mutation.SetDomainSessionid(i)
	return pvc
}

// SetDomainSessionidx sets the "domain_sessionidx" field.
func (pvc *PageViewCreate) SetDomainSessionidx(i int) *PageViewCreate {
	pvc.mutation.SetDomainSessionidx(i)
	return pvc
}

// SetPageViewsInSession sets the "page_views_in_session" field.
func (pvc *PageViewCreate) SetPageViewsInSession(i int) *PageViewCreate {
	pvc.mutation.SetPageViewsInSession(i)
	return pvc
}

// SetPageViewInSessionIndex sets the "page_view_in_session_index" field.
func (pvc *PageViewCreate) SetPageViewInSessionIndex(i int) *PageViewCreate {
	pvc.mutation.SetPageViewInSessionIndex(i)
	return pvc
}

// SetEngagedTimeInS sets the "engaged_time_in_s" field.
func (pvc *PageViewCreate) SetEngagedTimeInS(i int) *PageViewCreate {
	pvc.mutation.SetEngagedTimeInS(i)
	return pvc
}

// SetPageURL sets the "page_url" field.
func (pvc *PageViewCreate) SetPageURL(s string) *PageViewCreate {
	pvc.mutation.SetPageURL(s)
	return pvc
}

// SetPageTitle sets the "page_title" field.
func (pvc *PageViewCreate) SetPageTitle(s string) *PageViewCreate {
	pvc.mutation.SetPageTitle(s)
	return pvc
}

// Mutation returns the PageViewMutation object of the builder.
func (pvc *PageViewCreate) Mutation() *PageViewMutation {
	return pvc.mutation
}

// Save creates the PageView in the database.
func (pvc *PageViewCreate) Save(ctx context.Context) (*PageView, error) {
	var (
		err  error
		node *PageView
	)
	if len(pvc.hooks) == 0 {
		if err = pvc.check(); err != nil {
			return nil, err
		}
		node, err = pvc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PageViewMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pvc.check(); err != nil {
				return nil, err
			}
			pvc.mutation = mutation
			if node, err = pvc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pvc.hooks) - 1; i >= 0; i-- {
			if pvc.hooks[i] == nil {
				return nil, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = pvc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, pvc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*PageView)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from PageViewMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pvc *PageViewCreate) SaveX(ctx context.Context) *PageView {
	v, err := pvc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pvc *PageViewCreate) Exec(ctx context.Context) error {
	_, err := pvc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pvc *PageViewCreate) ExecX(ctx context.Context) {
	if err := pvc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pvc *PageViewCreate) check() error {
	if _, ok := pvc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`gen: missing required field "PageView.app_id"`)}
	}
	if _, ok := pvc.mutation.NameTracker(); !ok {
		return &ValidationError{Name: "name_tracker", err: errors.New(`gen: missing required field "PageView.name_tracker"`)}
	}
	if _, ok := pvc.mutation.Tenant(); !ok {
		return &ValidationError{Name: "tenant", err: errors.New(`gen: missing required field "PageView.tenant"`)}
	}
	if _, ok := pvc.mutation.PageViewID(); !ok {
		return &ValidationError{Name: "page_view_id", err: errors.New(`gen: missing required field "PageView.page_view_id"`)}
	}
	if _, ok := pvc.mutation.EventID(); !ok {
		return &ValidationError{Name: "event_id", err: errors.New(`gen: missing required field "PageView.event_id"`)}
	}
	if _, ok := pvc.mutation.SyncedToCustomerOs(); !ok {
		return &ValidationError{Name: "synced_to_customer_os", err: errors.New(`gen: missing required field "PageView.synced_to_customer_os"`)}
	}
	if _, ok := pvc.mutation.StartTstamp(); !ok {
		return &ValidationError{Name: "start_tstamp", err: errors.New(`gen: missing required field "PageView.start_tstamp"`)}
	}
	if _, ok := pvc.mutation.EndTstamp(); !ok {
		return &ValidationError{Name: "end_tstamp", err: errors.New(`gen: missing required field "PageView.end_tstamp"`)}
	}
	if _, ok := pvc.mutation.DomainUserid(); !ok {
		return &ValidationError{Name: "domain_userid", err: errors.New(`gen: missing required field "PageView.domain_userid"`)}
	}
	if _, ok := pvc.mutation.NetworkUserid(); !ok {
		return &ValidationError{Name: "network_userid", err: errors.New(`gen: missing required field "PageView.network_userid"`)}
	}
	if _, ok := pvc.mutation.DomainSessionid(); !ok {
		return &ValidationError{Name: "domain_sessionid", err: errors.New(`gen: missing required field "PageView.domain_sessionid"`)}
	}
	if _, ok := pvc.mutation.DomainSessionidx(); !ok {
		return &ValidationError{Name: "domain_sessionidx", err: errors.New(`gen: missing required field "PageView.domain_sessionidx"`)}
	}
	if _, ok := pvc.mutation.PageViewsInSession(); !ok {
		return &ValidationError{Name: "page_views_in_session", err: errors.New(`gen: missing required field "PageView.page_views_in_session"`)}
	}
	if _, ok := pvc.mutation.PageViewInSessionIndex(); !ok {
		return &ValidationError{Name: "page_view_in_session_index", err: errors.New(`gen: missing required field "PageView.page_view_in_session_index"`)}
	}
	if _, ok := pvc.mutation.EngagedTimeInS(); !ok {
		return &ValidationError{Name: "engaged_time_in_s", err: errors.New(`gen: missing required field "PageView.engaged_time_in_s"`)}
	}
	if _, ok := pvc.mutation.PageURL(); !ok {
		return &ValidationError{Name: "page_url", err: errors.New(`gen: missing required field "PageView.page_url"`)}
	}
	if _, ok := pvc.mutation.PageTitle(); !ok {
		return &ValidationError{Name: "page_title", err: errors.New(`gen: missing required field "PageView.page_title"`)}
	}
	return nil
}

func (pvc *PageViewCreate) sqlSave(ctx context.Context) (*PageView, error) {
	_node, _spec := pvc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pvc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (pvc *PageViewCreate) createSpec() (*PageView, *sqlgraph.CreateSpec) {
	var (
		_node = &PageView{config: pvc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: pageview.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: pageview.FieldID,
			},
		}
	)
	if value, ok := pvc.mutation.AppID(); ok {
		_spec.SetField(pageview.FieldAppID, field.TypeString, value)
		_node.AppID = value
	}
	if value, ok := pvc.mutation.NameTracker(); ok {
		_spec.SetField(pageview.FieldNameTracker, field.TypeString, value)
		_node.NameTracker = value
	}
	if value, ok := pvc.mutation.Tenant(); ok {
		_spec.SetField(pageview.FieldTenant, field.TypeString, value)
		_node.Tenant = value
	}
	if value, ok := pvc.mutation.PageViewID(); ok {
		_spec.SetField(pageview.FieldPageViewID, field.TypeString, value)
		_node.PageViewID = value
	}
	if value, ok := pvc.mutation.EventID(); ok {
		_spec.SetField(pageview.FieldEventID, field.TypeString, value)
		_node.EventID = value
	}
	if value, ok := pvc.mutation.SyncedToCustomerOs(); ok {
		_spec.SetField(pageview.FieldSyncedToCustomerOs, field.TypeBool, value)
		_node.SyncedToCustomerOs = value
	}
	if value, ok := pvc.mutation.StartTstamp(); ok {
		_spec.SetField(pageview.FieldStartTstamp, field.TypeTime, value)
		_node.StartTstamp = value
	}
	if value, ok := pvc.mutation.EndTstamp(); ok {
		_spec.SetField(pageview.FieldEndTstamp, field.TypeTime, value)
		_node.EndTstamp = value
	}
	if value, ok := pvc.mutation.VisitorID(); ok {
		_spec.SetField(pageview.FieldVisitorID, field.TypeString, value)
		_node.VisitorID = value
	}
	if value, ok := pvc.mutation.CustomerOsContactID(); ok {
		_spec.SetField(pageview.FieldCustomerOsContactID, field.TypeString, value)
		_node.CustomerOsContactID = value
	}
	if value, ok := pvc.mutation.DomainUserid(); ok {
		_spec.SetField(pageview.FieldDomainUserid, field.TypeString, value)
		_node.DomainUserid = value
	}
	if value, ok := pvc.mutation.NetworkUserid(); ok {
		_spec.SetField(pageview.FieldNetworkUserid, field.TypeString, value)
		_node.NetworkUserid = value
	}
	if value, ok := pvc.mutation.DomainSessionid(); ok {
		_spec.SetField(pageview.FieldDomainSessionid, field.TypeInt, value)
		_node.DomainSessionid = value
	}
	if value, ok := pvc.mutation.DomainSessionidx(); ok {
		_spec.SetField(pageview.FieldDomainSessionidx, field.TypeInt, value)
		_node.DomainSessionidx = value
	}
	if value, ok := pvc.mutation.PageViewsInSession(); ok {
		_spec.SetField(pageview.FieldPageViewsInSession, field.TypeInt, value)
		_node.PageViewsInSession = value
	}
	if value, ok := pvc.mutation.PageViewInSessionIndex(); ok {
		_spec.SetField(pageview.FieldPageViewInSessionIndex, field.TypeInt, value)
		_node.PageViewInSessionIndex = value
	}
	if value, ok := pvc.mutation.EngagedTimeInS(); ok {
		_spec.SetField(pageview.FieldEngagedTimeInS, field.TypeInt, value)
		_node.EngagedTimeInS = value
	}
	if value, ok := pvc.mutation.PageURL(); ok {
		_spec.SetField(pageview.FieldPageURL, field.TypeString, value)
		_node.PageURL = value
	}
	if value, ok := pvc.mutation.PageTitle(); ok {
		_spec.SetField(pageview.FieldPageTitle, field.TypeString, value)
		_node.PageTitle = value
	}
	return _node, _spec
}

// PageViewCreateBulk is the builder for creating many PageView entities in bulk.
type PageViewCreateBulk struct {
	config
	builders []*PageViewCreate
}

// Save creates the PageView entities in the database.
func (pvcb *PageViewCreateBulk) Save(ctx context.Context) ([]*PageView, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pvcb.builders))
	nodes := make([]*PageView, len(pvcb.builders))
	mutators := make([]Mutator, len(pvcb.builders))
	for i := range pvcb.builders {
		func(i int, root context.Context) {
			builder := pvcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PageViewMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pvcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pvcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pvcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pvcb *PageViewCreateBulk) SaveX(ctx context.Context) []*PageView {
	v, err := pvcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pvcb *PageViewCreateBulk) Exec(ctx context.Context) error {
	_, err := pvcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pvcb *PageViewCreateBulk) ExecX(ctx context.Context) {
	if err := pvcb.Exec(ctx); err != nil {
		panic(err)
	}
}
