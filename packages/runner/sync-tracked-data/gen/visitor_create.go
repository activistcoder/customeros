// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openline-ai/openline-customer-os/packages/runner/sync-tracked-data/gen/visitor"
)

// VisitorCreate is the builder for creating a Visitor entity.
type VisitorCreate struct {
	config
	mutation *VisitorMutation
	hooks    []Hook
}

// SetAppID sets the "app_id" field.
func (vc *VisitorCreate) SetAppID(s string) *VisitorCreate {
	vc.mutation.SetAppID(s)
	return vc
}

// SetNameTracker sets the "name_tracker" field.
func (vc *VisitorCreate) SetNameTracker(s string) *VisitorCreate {
	vc.mutation.SetNameTracker(s)
	return vc
}

// SetTenant sets the "tenant" field.
func (vc *VisitorCreate) SetTenant(s string) *VisitorCreate {
	vc.mutation.SetTenant(s)
	return vc
}

// SetVisitorID sets the "visitor_id" field.
func (vc *VisitorCreate) SetVisitorID(s string) *VisitorCreate {
	vc.mutation.SetVisitorID(s)
	return vc
}

// SetNillableVisitorID sets the "visitor_id" field if the given value is not nil.
func (vc *VisitorCreate) SetNillableVisitorID(s *string) *VisitorCreate {
	if s != nil {
		vc.SetVisitorID(*s)
	}
	return vc
}

// SetCustomerOsContactID sets the "customer_os_contact_id" field.
func (vc *VisitorCreate) SetCustomerOsContactID(s string) *VisitorCreate {
	vc.mutation.SetCustomerOsContactID(s)
	return vc
}

// SetNillableCustomerOsContactID sets the "customer_os_contact_id" field if the given value is not nil.
func (vc *VisitorCreate) SetNillableCustomerOsContactID(s *string) *VisitorCreate {
	if s != nil {
		vc.SetCustomerOsContactID(*s)
	}
	return vc
}

// SetDomainUserid sets the "domain_userid" field.
func (vc *VisitorCreate) SetDomainUserid(s string) *VisitorCreate {
	vc.mutation.SetDomainUserid(s)
	return vc
}

// SetNetworkUserid sets the "network_userid" field.
func (vc *VisitorCreate) SetNetworkUserid(s string) *VisitorCreate {
	vc.mutation.SetNetworkUserid(s)
	return vc
}

// SetPageViews sets the "page_views" field.
func (vc *VisitorCreate) SetPageViews(i int) *VisitorCreate {
	vc.mutation.SetPageViews(i)
	return vc
}

// SetSessions sets the "sessions" field.
func (vc *VisitorCreate) SetSessions(i int) *VisitorCreate {
	vc.mutation.SetSessions(i)
	return vc
}

// SetEngagedTimeInS sets the "engaged_time_in_s" field.
func (vc *VisitorCreate) SetEngagedTimeInS(i int) *VisitorCreate {
	vc.mutation.SetEngagedTimeInS(i)
	return vc
}

// SetSyncedToCustomerOs sets the "synced_to_customer_os" field.
func (vc *VisitorCreate) SetSyncedToCustomerOs(b bool) *VisitorCreate {
	vc.mutation.SetSyncedToCustomerOs(b)
	return vc
}

// Mutation returns the VisitorMutation object of the builder.
func (vc *VisitorCreate) Mutation() *VisitorMutation {
	return vc.mutation
}

// Save creates the Visitor in the database.
func (vc *VisitorCreate) Save(ctx context.Context) (*Visitor, error) {
	var (
		err  error
		node *Visitor
	)
	if len(vc.hooks) == 0 {
		if err = vc.check(); err != nil {
			return nil, err
		}
		node, err = vc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VisitorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vc.check(); err != nil {
				return nil, err
			}
			vc.mutation = mutation
			if node, err = vc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(vc.hooks) - 1; i >= 0; i-- {
			if vc.hooks[i] == nil {
				return nil, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = vc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, vc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Visitor)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from VisitorMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (vc *VisitorCreate) SaveX(ctx context.Context) *Visitor {
	v, err := vc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vc *VisitorCreate) Exec(ctx context.Context) error {
	_, err := vc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vc *VisitorCreate) ExecX(ctx context.Context) {
	if err := vc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vc *VisitorCreate) check() error {
	if _, ok := vc.mutation.AppID(); !ok {
		return &ValidationError{Name: "app_id", err: errors.New(`gen: missing required field "Visitor.app_id"`)}
	}
	if _, ok := vc.mutation.NameTracker(); !ok {
		return &ValidationError{Name: "name_tracker", err: errors.New(`gen: missing required field "Visitor.name_tracker"`)}
	}
	if _, ok := vc.mutation.Tenant(); !ok {
		return &ValidationError{Name: "tenant", err: errors.New(`gen: missing required field "Visitor.tenant"`)}
	}
	if _, ok := vc.mutation.DomainUserid(); !ok {
		return &ValidationError{Name: "domain_userid", err: errors.New(`gen: missing required field "Visitor.domain_userid"`)}
	}
	if _, ok := vc.mutation.NetworkUserid(); !ok {
		return &ValidationError{Name: "network_userid", err: errors.New(`gen: missing required field "Visitor.network_userid"`)}
	}
	if _, ok := vc.mutation.PageViews(); !ok {
		return &ValidationError{Name: "page_views", err: errors.New(`gen: missing required field "Visitor.page_views"`)}
	}
	if _, ok := vc.mutation.Sessions(); !ok {
		return &ValidationError{Name: "sessions", err: errors.New(`gen: missing required field "Visitor.sessions"`)}
	}
	if _, ok := vc.mutation.EngagedTimeInS(); !ok {
		return &ValidationError{Name: "engaged_time_in_s", err: errors.New(`gen: missing required field "Visitor.engaged_time_in_s"`)}
	}
	if _, ok := vc.mutation.SyncedToCustomerOs(); !ok {
		return &ValidationError{Name: "synced_to_customer_os", err: errors.New(`gen: missing required field "Visitor.synced_to_customer_os"`)}
	}
	return nil
}

func (vc *VisitorCreate) sqlSave(ctx context.Context) (*Visitor, error) {
	_node, _spec := vc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (vc *VisitorCreate) createSpec() (*Visitor, *sqlgraph.CreateSpec) {
	var (
		_node = &Visitor{config: vc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: visitor.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: visitor.FieldID,
			},
		}
	)
	if value, ok := vc.mutation.AppID(); ok {
		_spec.SetField(visitor.FieldAppID, field.TypeString, value)
		_node.AppID = value
	}
	if value, ok := vc.mutation.NameTracker(); ok {
		_spec.SetField(visitor.FieldNameTracker, field.TypeString, value)
		_node.NameTracker = value
	}
	if value, ok := vc.mutation.Tenant(); ok {
		_spec.SetField(visitor.FieldTenant, field.TypeString, value)
		_node.Tenant = value
	}
	if value, ok := vc.mutation.VisitorID(); ok {
		_spec.SetField(visitor.FieldVisitorID, field.TypeString, value)
		_node.VisitorID = value
	}
	if value, ok := vc.mutation.CustomerOsContactID(); ok {
		_spec.SetField(visitor.FieldCustomerOsContactID, field.TypeString, value)
		_node.CustomerOsContactID = value
	}
	if value, ok := vc.mutation.DomainUserid(); ok {
		_spec.SetField(visitor.FieldDomainUserid, field.TypeString, value)
		_node.DomainUserid = value
	}
	if value, ok := vc.mutation.NetworkUserid(); ok {
		_spec.SetField(visitor.FieldNetworkUserid, field.TypeString, value)
		_node.NetworkUserid = value
	}
	if value, ok := vc.mutation.PageViews(); ok {
		_spec.SetField(visitor.FieldPageViews, field.TypeInt, value)
		_node.PageViews = value
	}
	if value, ok := vc.mutation.Sessions(); ok {
		_spec.SetField(visitor.FieldSessions, field.TypeInt, value)
		_node.Sessions = value
	}
	if value, ok := vc.mutation.EngagedTimeInS(); ok {
		_spec.SetField(visitor.FieldEngagedTimeInS, field.TypeInt, value)
		_node.EngagedTimeInS = value
	}
	if value, ok := vc.mutation.SyncedToCustomerOs(); ok {
		_spec.SetField(visitor.FieldSyncedToCustomerOs, field.TypeBool, value)
		_node.SyncedToCustomerOs = value
	}
	return _node, _spec
}

// VisitorCreateBulk is the builder for creating many Visitor entities in bulk.
type VisitorCreateBulk struct {
	config
	builders []*VisitorCreate
}

// Save creates the Visitor entities in the database.
func (vcb *VisitorCreateBulk) Save(ctx context.Context) ([]*Visitor, error) {
	specs := make([]*sqlgraph.CreateSpec, len(vcb.builders))
	nodes := make([]*Visitor, len(vcb.builders))
	mutators := make([]Mutator, len(vcb.builders))
	for i := range vcb.builders {
		func(i int, root context.Context) {
			builder := vcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VisitorMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vcb *VisitorCreateBulk) SaveX(ctx context.Context) []*Visitor {
	v, err := vcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vcb *VisitorCreateBulk) Exec(ctx context.Context) error {
	_, err := vcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vcb *VisitorCreateBulk) ExecX(ctx context.Context) {
	if err := vcb.Exec(ctx); err != nil {
		panic(err)
	}
}
