// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/openline-ai/openline-customer-os/packages/runner/sync-tracked-data/gen/predicate"
	"github.com/openline-ai/openline-customer-os/packages/runner/sync-tracked-data/gen/visitor"
)

// VisitorUpdate is the builder for updating Visitor entities.
type VisitorUpdate struct {
	config
	hooks    []Hook
	mutation *VisitorMutation
}

// Where appends a list predicates to the VisitorUpdate builder.
func (vu *VisitorUpdate) Where(ps ...predicate.Visitor) *VisitorUpdate {
	vu.mutation.Where(ps...)
	return vu
}

// SetAppID sets the "app_id" field.
func (vu *VisitorUpdate) SetAppID(s string) *VisitorUpdate {
	vu.mutation.SetAppID(s)
	return vu
}

// SetNameTracker sets the "name_tracker" field.
func (vu *VisitorUpdate) SetNameTracker(s string) *VisitorUpdate {
	vu.mutation.SetNameTracker(s)
	return vu
}

// SetTenant sets the "tenant" field.
func (vu *VisitorUpdate) SetTenant(s string) *VisitorUpdate {
	vu.mutation.SetTenant(s)
	return vu
}

// SetVisitorID sets the "visitor_id" field.
func (vu *VisitorUpdate) SetVisitorID(s string) *VisitorUpdate {
	vu.mutation.SetVisitorID(s)
	return vu
}

// SetNillableVisitorID sets the "visitor_id" field if the given value is not nil.
func (vu *VisitorUpdate) SetNillableVisitorID(s *string) *VisitorUpdate {
	if s != nil {
		vu.SetVisitorID(*s)
	}
	return vu
}

// ClearVisitorID clears the value of the "visitor_id" field.
func (vu *VisitorUpdate) ClearVisitorID() *VisitorUpdate {
	vu.mutation.ClearVisitorID()
	return vu
}

// SetCustomerOsContactID sets the "customer_os_contact_id" field.
func (vu *VisitorUpdate) SetCustomerOsContactID(s string) *VisitorUpdate {
	vu.mutation.SetCustomerOsContactID(s)
	return vu
}

// SetNillableCustomerOsContactID sets the "customer_os_contact_id" field if the given value is not nil.
func (vu *VisitorUpdate) SetNillableCustomerOsContactID(s *string) *VisitorUpdate {
	if s != nil {
		vu.SetCustomerOsContactID(*s)
	}
	return vu
}

// ClearCustomerOsContactID clears the value of the "customer_os_contact_id" field.
func (vu *VisitorUpdate) ClearCustomerOsContactID() *VisitorUpdate {
	vu.mutation.ClearCustomerOsContactID()
	return vu
}

// SetDomainUserid sets the "domain_userid" field.
func (vu *VisitorUpdate) SetDomainUserid(s string) *VisitorUpdate {
	vu.mutation.SetDomainUserid(s)
	return vu
}

// SetNetworkUserid sets the "network_userid" field.
func (vu *VisitorUpdate) SetNetworkUserid(s string) *VisitorUpdate {
	vu.mutation.SetNetworkUserid(s)
	return vu
}

// SetPageViews sets the "page_views" field.
func (vu *VisitorUpdate) SetPageViews(i int) *VisitorUpdate {
	vu.mutation.ResetPageViews()
	vu.mutation.SetPageViews(i)
	return vu
}

// AddPageViews adds i to the "page_views" field.
func (vu *VisitorUpdate) AddPageViews(i int) *VisitorUpdate {
	vu.mutation.AddPageViews(i)
	return vu
}

// SetSessions sets the "sessions" field.
func (vu *VisitorUpdate) SetSessions(i int) *VisitorUpdate {
	vu.mutation.ResetSessions()
	vu.mutation.SetSessions(i)
	return vu
}

// AddSessions adds i to the "sessions" field.
func (vu *VisitorUpdate) AddSessions(i int) *VisitorUpdate {
	vu.mutation.AddSessions(i)
	return vu
}

// SetEngagedTimeInS sets the "engaged_time_in_s" field.
func (vu *VisitorUpdate) SetEngagedTimeInS(i int) *VisitorUpdate {
	vu.mutation.ResetEngagedTimeInS()
	vu.mutation.SetEngagedTimeInS(i)
	return vu
}

// AddEngagedTimeInS adds i to the "engaged_time_in_s" field.
func (vu *VisitorUpdate) AddEngagedTimeInS(i int) *VisitorUpdate {
	vu.mutation.AddEngagedTimeInS(i)
	return vu
}

// SetSyncedToCustomerOs sets the "synced_to_customer_os" field.
func (vu *VisitorUpdate) SetSyncedToCustomerOs(b bool) *VisitorUpdate {
	vu.mutation.SetSyncedToCustomerOs(b)
	return vu
}

// Mutation returns the VisitorMutation object of the builder.
func (vu *VisitorUpdate) Mutation() *VisitorMutation {
	return vu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (vu *VisitorUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(vu.hooks) == 0 {
		affected, err = vu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VisitorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			vu.mutation = mutation
			affected, err = vu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(vu.hooks) - 1; i >= 0; i-- {
			if vu.hooks[i] == nil {
				return 0, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = vu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (vu *VisitorUpdate) SaveX(ctx context.Context) int {
	affected, err := vu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (vu *VisitorUpdate) Exec(ctx context.Context) error {
	_, err := vu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vu *VisitorUpdate) ExecX(ctx context.Context) {
	if err := vu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vu *VisitorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   visitor.Table,
			Columns: visitor.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: visitor.FieldID,
			},
		},
	}
	if ps := vu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vu.mutation.AppID(); ok {
		_spec.SetField(visitor.FieldAppID, field.TypeString, value)
	}
	if value, ok := vu.mutation.NameTracker(); ok {
		_spec.SetField(visitor.FieldNameTracker, field.TypeString, value)
	}
	if value, ok := vu.mutation.Tenant(); ok {
		_spec.SetField(visitor.FieldTenant, field.TypeString, value)
	}
	if value, ok := vu.mutation.VisitorID(); ok {
		_spec.SetField(visitor.FieldVisitorID, field.TypeString, value)
	}
	if vu.mutation.VisitorIDCleared() {
		_spec.ClearField(visitor.FieldVisitorID, field.TypeString)
	}
	if value, ok := vu.mutation.CustomerOsContactID(); ok {
		_spec.SetField(visitor.FieldCustomerOsContactID, field.TypeString, value)
	}
	if vu.mutation.CustomerOsContactIDCleared() {
		_spec.ClearField(visitor.FieldCustomerOsContactID, field.TypeString)
	}
	if value, ok := vu.mutation.DomainUserid(); ok {
		_spec.SetField(visitor.FieldDomainUserid, field.TypeString, value)
	}
	if value, ok := vu.mutation.NetworkUserid(); ok {
		_spec.SetField(visitor.FieldNetworkUserid, field.TypeString, value)
	}
	if value, ok := vu.mutation.PageViews(); ok {
		_spec.SetField(visitor.FieldPageViews, field.TypeInt, value)
	}
	if value, ok := vu.mutation.AddedPageViews(); ok {
		_spec.AddField(visitor.FieldPageViews, field.TypeInt, value)
	}
	if value, ok := vu.mutation.Sessions(); ok {
		_spec.SetField(visitor.FieldSessions, field.TypeInt, value)
	}
	if value, ok := vu.mutation.AddedSessions(); ok {
		_spec.AddField(visitor.FieldSessions, field.TypeInt, value)
	}
	if value, ok := vu.mutation.EngagedTimeInS(); ok {
		_spec.SetField(visitor.FieldEngagedTimeInS, field.TypeInt, value)
	}
	if value, ok := vu.mutation.AddedEngagedTimeInS(); ok {
		_spec.AddField(visitor.FieldEngagedTimeInS, field.TypeInt, value)
	}
	if value, ok := vu.mutation.SyncedToCustomerOs(); ok {
		_spec.SetField(visitor.FieldSyncedToCustomerOs, field.TypeBool, value)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, vu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{visitor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// VisitorUpdateOne is the builder for updating a single Visitor entity.
type VisitorUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *VisitorMutation
}

// SetAppID sets the "app_id" field.
func (vuo *VisitorUpdateOne) SetAppID(s string) *VisitorUpdateOne {
	vuo.mutation.SetAppID(s)
	return vuo
}

// SetNameTracker sets the "name_tracker" field.
func (vuo *VisitorUpdateOne) SetNameTracker(s string) *VisitorUpdateOne {
	vuo.mutation.SetNameTracker(s)
	return vuo
}

// SetTenant sets the "tenant" field.
func (vuo *VisitorUpdateOne) SetTenant(s string) *VisitorUpdateOne {
	vuo.mutation.SetTenant(s)
	return vuo
}

// SetVisitorID sets the "visitor_id" field.
func (vuo *VisitorUpdateOne) SetVisitorID(s string) *VisitorUpdateOne {
	vuo.mutation.SetVisitorID(s)
	return vuo
}

// SetNillableVisitorID sets the "visitor_id" field if the given value is not nil.
func (vuo *VisitorUpdateOne) SetNillableVisitorID(s *string) *VisitorUpdateOne {
	if s != nil {
		vuo.SetVisitorID(*s)
	}
	return vuo
}

// ClearVisitorID clears the value of the "visitor_id" field.
func (vuo *VisitorUpdateOne) ClearVisitorID() *VisitorUpdateOne {
	vuo.mutation.ClearVisitorID()
	return vuo
}

// SetCustomerOsContactID sets the "customer_os_contact_id" field.
func (vuo *VisitorUpdateOne) SetCustomerOsContactID(s string) *VisitorUpdateOne {
	vuo.mutation.SetCustomerOsContactID(s)
	return vuo
}

// SetNillableCustomerOsContactID sets the "customer_os_contact_id" field if the given value is not nil.
func (vuo *VisitorUpdateOne) SetNillableCustomerOsContactID(s *string) *VisitorUpdateOne {
	if s != nil {
		vuo.SetCustomerOsContactID(*s)
	}
	return vuo
}

// ClearCustomerOsContactID clears the value of the "customer_os_contact_id" field.
func (vuo *VisitorUpdateOne) ClearCustomerOsContactID() *VisitorUpdateOne {
	vuo.mutation.ClearCustomerOsContactID()
	return vuo
}

// SetDomainUserid sets the "domain_userid" field.
func (vuo *VisitorUpdateOne) SetDomainUserid(s string) *VisitorUpdateOne {
	vuo.mutation.SetDomainUserid(s)
	return vuo
}

// SetNetworkUserid sets the "network_userid" field.
func (vuo *VisitorUpdateOne) SetNetworkUserid(s string) *VisitorUpdateOne {
	vuo.mutation.SetNetworkUserid(s)
	return vuo
}

// SetPageViews sets the "page_views" field.
func (vuo *VisitorUpdateOne) SetPageViews(i int) *VisitorUpdateOne {
	vuo.mutation.ResetPageViews()
	vuo.mutation.SetPageViews(i)
	return vuo
}

// AddPageViews adds i to the "page_views" field.
func (vuo *VisitorUpdateOne) AddPageViews(i int) *VisitorUpdateOne {
	vuo.mutation.AddPageViews(i)
	return vuo
}

// SetSessions sets the "sessions" field.
func (vuo *VisitorUpdateOne) SetSessions(i int) *VisitorUpdateOne {
	vuo.mutation.ResetSessions()
	vuo.mutation.SetSessions(i)
	return vuo
}

// AddSessions adds i to the "sessions" field.
func (vuo *VisitorUpdateOne) AddSessions(i int) *VisitorUpdateOne {
	vuo.mutation.AddSessions(i)
	return vuo
}

// SetEngagedTimeInS sets the "engaged_time_in_s" field.
func (vuo *VisitorUpdateOne) SetEngagedTimeInS(i int) *VisitorUpdateOne {
	vuo.mutation.ResetEngagedTimeInS()
	vuo.mutation.SetEngagedTimeInS(i)
	return vuo
}

// AddEngagedTimeInS adds i to the "engaged_time_in_s" field.
func (vuo *VisitorUpdateOne) AddEngagedTimeInS(i int) *VisitorUpdateOne {
	vuo.mutation.AddEngagedTimeInS(i)
	return vuo
}

// SetSyncedToCustomerOs sets the "synced_to_customer_os" field.
func (vuo *VisitorUpdateOne) SetSyncedToCustomerOs(b bool) *VisitorUpdateOne {
	vuo.mutation.SetSyncedToCustomerOs(b)
	return vuo
}

// Mutation returns the VisitorMutation object of the builder.
func (vuo *VisitorUpdateOne) Mutation() *VisitorMutation {
	return vuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (vuo *VisitorUpdateOne) Select(field string, fields ...string) *VisitorUpdateOne {
	vuo.fields = append([]string{field}, fields...)
	return vuo
}

// Save executes the query and returns the updated Visitor entity.
func (vuo *VisitorUpdateOne) Save(ctx context.Context) (*Visitor, error) {
	var (
		err  error
		node *Visitor
	)
	if len(vuo.hooks) == 0 {
		node, err = vuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VisitorMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			vuo.mutation = mutation
			node, err = vuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(vuo.hooks) - 1; i >= 0; i-- {
			if vuo.hooks[i] == nil {
				return nil, fmt.Errorf("gen: uninitialized hook (forgotten import gen/runtime?)")
			}
			mut = vuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, vuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Visitor)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from VisitorMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (vuo *VisitorUpdateOne) SaveX(ctx context.Context) *Visitor {
	node, err := vuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (vuo *VisitorUpdateOne) Exec(ctx context.Context) error {
	_, err := vuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vuo *VisitorUpdateOne) ExecX(ctx context.Context) {
	if err := vuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (vuo *VisitorUpdateOne) sqlSave(ctx context.Context) (_node *Visitor, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   visitor.Table,
			Columns: visitor.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: visitor.FieldID,
			},
		},
	}
	id, ok := vuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`gen: missing "Visitor.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := vuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, visitor.FieldID)
		for _, f := range fields {
			if !visitor.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("gen: invalid field %q for query", f)}
			}
			if f != visitor.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := vuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := vuo.mutation.AppID(); ok {
		_spec.SetField(visitor.FieldAppID, field.TypeString, value)
	}
	if value, ok := vuo.mutation.NameTracker(); ok {
		_spec.SetField(visitor.FieldNameTracker, field.TypeString, value)
	}
	if value, ok := vuo.mutation.Tenant(); ok {
		_spec.SetField(visitor.FieldTenant, field.TypeString, value)
	}
	if value, ok := vuo.mutation.VisitorID(); ok {
		_spec.SetField(visitor.FieldVisitorID, field.TypeString, value)
	}
	if vuo.mutation.VisitorIDCleared() {
		_spec.ClearField(visitor.FieldVisitorID, field.TypeString)
	}
	if value, ok := vuo.mutation.CustomerOsContactID(); ok {
		_spec.SetField(visitor.FieldCustomerOsContactID, field.TypeString, value)
	}
	if vuo.mutation.CustomerOsContactIDCleared() {
		_spec.ClearField(visitor.FieldCustomerOsContactID, field.TypeString)
	}
	if value, ok := vuo.mutation.DomainUserid(); ok {
		_spec.SetField(visitor.FieldDomainUserid, field.TypeString, value)
	}
	if value, ok := vuo.mutation.NetworkUserid(); ok {
		_spec.SetField(visitor.FieldNetworkUserid, field.TypeString, value)
	}
	if value, ok := vuo.mutation.PageViews(); ok {
		_spec.SetField(visitor.FieldPageViews, field.TypeInt, value)
	}
	if value, ok := vuo.mutation.AddedPageViews(); ok {
		_spec.AddField(visitor.FieldPageViews, field.TypeInt, value)
	}
	if value, ok := vuo.mutation.Sessions(); ok {
		_spec.SetField(visitor.FieldSessions, field.TypeInt, value)
	}
	if value, ok := vuo.mutation.AddedSessions(); ok {
		_spec.AddField(visitor.FieldSessions, field.TypeInt, value)
	}
	if value, ok := vuo.mutation.EngagedTimeInS(); ok {
		_spec.SetField(visitor.FieldEngagedTimeInS, field.TypeInt, value)
	}
	if value, ok := vuo.mutation.AddedEngagedTimeInS(); ok {
		_spec.AddField(visitor.FieldEngagedTimeInS, field.TypeInt, value)
	}
	if value, ok := vuo.mutation.SyncedToCustomerOs(); ok {
		_spec.SetField(visitor.FieldSyncedToCustomerOs, field.TypeBool, value)
	}
	_node = &Visitor{config: vuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, vuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{visitor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
