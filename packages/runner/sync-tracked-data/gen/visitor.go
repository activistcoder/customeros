// Code generated by ent, DO NOT EDIT.

package gen

import (
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
	"github.com/openline-ai/openline-customer-os/packages/runner/sync-tracked-data/gen/visitor"
)

// Visitor is the model entity for the Visitor schema.
type Visitor struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID string `json:"app_id,omitempty"`
	// NameTracker holds the value of the "name_tracker" field.
	NameTracker string `json:"name_tracker,omitempty"`
	// Tenant holds the value of the "tenant" field.
	Tenant string `json:"tenant,omitempty"`
	// VisitorID holds the value of the "visitor_id" field.
	VisitorID string `json:"visitor_id,omitempty"`
	// CustomerOsContactID holds the value of the "customer_os_contact_id" field.
	CustomerOsContactID string `json:"customer_os_contact_id,omitempty"`
	// DomainUserid holds the value of the "domain_userid" field.
	DomainUserid string `json:"domain_userid,omitempty"`
	// NetworkUserid holds the value of the "network_userid" field.
	NetworkUserid string `json:"network_userid,omitempty"`
	// PageViews holds the value of the "page_views" field.
	PageViews int `json:"page_views,omitempty"`
	// Sessions holds the value of the "sessions" field.
	Sessions int `json:"sessions,omitempty"`
	// EngagedTimeInS holds the value of the "engaged_time_in_s" field.
	EngagedTimeInS int `json:"engaged_time_in_s,omitempty"`
	// SyncedToCustomerOs holds the value of the "synced_to_customer_os" field.
	SyncedToCustomerOs bool `json:"synced_to_customer_os,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Visitor) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case visitor.FieldSyncedToCustomerOs:
			values[i] = new(sql.NullBool)
		case visitor.FieldID, visitor.FieldPageViews, visitor.FieldSessions, visitor.FieldEngagedTimeInS:
			values[i] = new(sql.NullInt64)
		case visitor.FieldAppID, visitor.FieldNameTracker, visitor.FieldTenant, visitor.FieldVisitorID, visitor.FieldCustomerOsContactID, visitor.FieldDomainUserid, visitor.FieldNetworkUserid:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Visitor", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Visitor fields.
func (v *Visitor) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case visitor.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			v.ID = int(value.Int64)
		case visitor.FieldAppID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value.Valid {
				v.AppID = value.String
			}
		case visitor.FieldNameTracker:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name_tracker", values[i])
			} else if value.Valid {
				v.NameTracker = value.String
			}
		case visitor.FieldTenant:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant", values[i])
			} else if value.Valid {
				v.Tenant = value.String
			}
		case visitor.FieldVisitorID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field visitor_id", values[i])
			} else if value.Valid {
				v.VisitorID = value.String
			}
		case visitor.FieldCustomerOsContactID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field customer_os_contact_id", values[i])
			} else if value.Valid {
				v.CustomerOsContactID = value.String
			}
		case visitor.FieldDomainUserid:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field domain_userid", values[i])
			} else if value.Valid {
				v.DomainUserid = value.String
			}
		case visitor.FieldNetworkUserid:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field network_userid", values[i])
			} else if value.Valid {
				v.NetworkUserid = value.String
			}
		case visitor.FieldPageViews:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field page_views", values[i])
			} else if value.Valid {
				v.PageViews = int(value.Int64)
			}
		case visitor.FieldSessions:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field sessions", values[i])
			} else if value.Valid {
				v.Sessions = int(value.Int64)
			}
		case visitor.FieldEngagedTimeInS:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field engaged_time_in_s", values[i])
			} else if value.Valid {
				v.EngagedTimeInS = int(value.Int64)
			}
		case visitor.FieldSyncedToCustomerOs:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field synced_to_customer_os", values[i])
			} else if value.Valid {
				v.SyncedToCustomerOs = value.Bool
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Visitor.
// Note that you need to call Visitor.Unwrap() before calling this method if this Visitor
// was returned from a transaction, and the transaction was committed or rolled back.
func (v *Visitor) Update() *VisitorUpdateOne {
	return (&VisitorClient{config: v.config}).UpdateOne(v)
}

// Unwrap unwraps the Visitor entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (v *Visitor) Unwrap() *Visitor {
	_tx, ok := v.config.driver.(*txDriver)
	if !ok {
		panic("gen: Visitor is not a transactional entity")
	}
	v.config.driver = _tx.drv
	return v
}

// String implements the fmt.Stringer.
func (v *Visitor) String() string {
	var builder strings.Builder
	builder.WriteString("Visitor(")
	builder.WriteString(fmt.Sprintf("id=%v, ", v.ID))
	builder.WriteString("app_id=")
	builder.WriteString(v.AppID)
	builder.WriteString(", ")
	builder.WriteString("name_tracker=")
	builder.WriteString(v.NameTracker)
	builder.WriteString(", ")
	builder.WriteString("tenant=")
	builder.WriteString(v.Tenant)
	builder.WriteString(", ")
	builder.WriteString("visitor_id=")
	builder.WriteString(v.VisitorID)
	builder.WriteString(", ")
	builder.WriteString("customer_os_contact_id=")
	builder.WriteString(v.CustomerOsContactID)
	builder.WriteString(", ")
	builder.WriteString("domain_userid=")
	builder.WriteString(v.DomainUserid)
	builder.WriteString(", ")
	builder.WriteString("network_userid=")
	builder.WriteString(v.NetworkUserid)
	builder.WriteString(", ")
	builder.WriteString("page_views=")
	builder.WriteString(fmt.Sprintf("%v", v.PageViews))
	builder.WriteString(", ")
	builder.WriteString("sessions=")
	builder.WriteString(fmt.Sprintf("%v", v.Sessions))
	builder.WriteString(", ")
	builder.WriteString("engaged_time_in_s=")
	builder.WriteString(fmt.Sprintf("%v", v.EngagedTimeInS))
	builder.WriteString(", ")
	builder.WriteString("synced_to_customer_os=")
	builder.WriteString(fmt.Sprintf("%v", v.SyncedToCustomerOs))
	builder.WriteByte(')')
	return builder.String()
}

// Visitors is a parsable slice of Visitor.
type Visitors []*Visitor

func (v Visitors) config(cfg config) {
	for _i := range v {
		v[_i].config = cfg
	}
}
