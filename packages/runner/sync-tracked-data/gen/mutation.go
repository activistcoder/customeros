// Code generated by ent, DO NOT EDIT.

package gen

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/openline-ai/openline-customer-os/packages/runner/sync-tracked-data/gen/pageview"
	"github.com/openline-ai/openline-customer-os/packages/runner/sync-tracked-data/gen/predicate"
	"github.com/openline-ai/openline-customer-os/packages/runner/sync-tracked-data/gen/session"
	"github.com/openline-ai/openline-customer-os/packages/runner/sync-tracked-data/gen/visitor"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypePageView = "PageView"
	TypeSession  = "Session"
	TypeVisitor  = "Visitor"
)

// PageViewMutation represents an operation that mutates the PageView nodes in the graph.
type PageViewMutation struct {
	config
	op                            Op
	typ                           string
	id                            *int
	app_id                        *string
	name_tracker                  *string
	tenant                        *string
	page_view_id                  *string
	event_id                      *string
	synced_to_customer_os         *bool
	start_tstamp                  *time.Time
	end_tstamp                    *time.Time
	visitor_id                    *string
	customer_os_contact_id        *string
	domain_userid                 *string
	network_userid                *string
	domain_sessionid              *int
	adddomain_sessionid           *int
	domain_sessionidx             *int
	adddomain_sessionidx          *int
	page_views_in_session         *int
	addpage_views_in_session      *int
	page_view_in_session_index    *int
	addpage_view_in_session_index *int
	engaged_time_in_s             *int
	addengaged_time_in_s          *int
	page_url                      *string
	page_title                    *string
	clearedFields                 map[string]struct{}
	done                          bool
	oldValue                      func(context.Context) (*PageView, error)
	predicates                    []predicate.PageView
}

var _ ent.Mutation = (*PageViewMutation)(nil)

// pageviewOption allows management of the mutation configuration using functional options.
type pageviewOption func(*PageViewMutation)

// newPageViewMutation creates new mutation for the PageView entity.
func newPageViewMutation(c config, op Op, opts ...pageviewOption) *PageViewMutation {
	m := &PageViewMutation{
		config:        c,
		op:            op,
		typ:           TypePageView,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withPageViewID sets the ID field of the mutation.
func withPageViewID(id int) pageviewOption {
	return func(m *PageViewMutation) {
		var (
			err   error
			once  sync.Once
			value *PageView
		)
		m.oldValue = func(ctx context.Context) (*PageView, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().PageView.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withPageView sets the old PageView of the mutation.
func withPageView(node *PageView) pageviewOption {
	return func(m *PageViewMutation) {
		m.oldValue = func(context.Context) (*PageView, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m PageViewMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m PageViewMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("gen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *PageViewMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *PageViewMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().PageView.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAppID sets the "app_id" field.
func (m *PageViewMutation) SetAppID(s string) {
	m.app_id = &s
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *PageViewMutation) AppID() (r string, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the PageView entity.
// If the PageView object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageViewMutation) OldAppID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ResetAppID resets all changes to the "app_id" field.
func (m *PageViewMutation) ResetAppID() {
	m.app_id = nil
}

// SetNameTracker sets the "name_tracker" field.
func (m *PageViewMutation) SetNameTracker(s string) {
	m.name_tracker = &s
}

// NameTracker returns the value of the "name_tracker" field in the mutation.
func (m *PageViewMutation) NameTracker() (r string, exists bool) {
	v := m.name_tracker
	if v == nil {
		return
	}
	return *v, true
}

// OldNameTracker returns the old "name_tracker" field's value of the PageView entity.
// If the PageView object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageViewMutation) OldNameTracker(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNameTracker is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNameTracker requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNameTracker: %w", err)
	}
	return oldValue.NameTracker, nil
}

// ResetNameTracker resets all changes to the "name_tracker" field.
func (m *PageViewMutation) ResetNameTracker() {
	m.name_tracker = nil
}

// SetTenant sets the "tenant" field.
func (m *PageViewMutation) SetTenant(s string) {
	m.tenant = &s
}

// Tenant returns the value of the "tenant" field in the mutation.
func (m *PageViewMutation) Tenant() (r string, exists bool) {
	v := m.tenant
	if v == nil {
		return
	}
	return *v, true
}

// OldTenant returns the old "tenant" field's value of the PageView entity.
// If the PageView object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageViewMutation) OldTenant(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTenant is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTenant requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenant: %w", err)
	}
	return oldValue.Tenant, nil
}

// ResetTenant resets all changes to the "tenant" field.
func (m *PageViewMutation) ResetTenant() {
	m.tenant = nil
}

// SetPageViewID sets the "page_view_id" field.
func (m *PageViewMutation) SetPageViewID(s string) {
	m.page_view_id = &s
}

// PageViewID returns the value of the "page_view_id" field in the mutation.
func (m *PageViewMutation) PageViewID() (r string, exists bool) {
	v := m.page_view_id
	if v == nil {
		return
	}
	return *v, true
}

// OldPageViewID returns the old "page_view_id" field's value of the PageView entity.
// If the PageView object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageViewMutation) OldPageViewID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPageViewID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPageViewID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPageViewID: %w", err)
	}
	return oldValue.PageViewID, nil
}

// ResetPageViewID resets all changes to the "page_view_id" field.
func (m *PageViewMutation) ResetPageViewID() {
	m.page_view_id = nil
}

// SetEventID sets the "event_id" field.
func (m *PageViewMutation) SetEventID(s string) {
	m.event_id = &s
}

// EventID returns the value of the "event_id" field in the mutation.
func (m *PageViewMutation) EventID() (r string, exists bool) {
	v := m.event_id
	if v == nil {
		return
	}
	return *v, true
}

// OldEventID returns the old "event_id" field's value of the PageView entity.
// If the PageView object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageViewMutation) OldEventID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEventID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEventID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEventID: %w", err)
	}
	return oldValue.EventID, nil
}

// ResetEventID resets all changes to the "event_id" field.
func (m *PageViewMutation) ResetEventID() {
	m.event_id = nil
}

// SetSyncedToCustomerOs sets the "synced_to_customer_os" field.
func (m *PageViewMutation) SetSyncedToCustomerOs(b bool) {
	m.synced_to_customer_os = &b
}

// SyncedToCustomerOs returns the value of the "synced_to_customer_os" field in the mutation.
func (m *PageViewMutation) SyncedToCustomerOs() (r bool, exists bool) {
	v := m.synced_to_customer_os
	if v == nil {
		return
	}
	return *v, true
}

// OldSyncedToCustomerOs returns the old "synced_to_customer_os" field's value of the PageView entity.
// If the PageView object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageViewMutation) OldSyncedToCustomerOs(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSyncedToCustomerOs is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSyncedToCustomerOs requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSyncedToCustomerOs: %w", err)
	}
	return oldValue.SyncedToCustomerOs, nil
}

// ResetSyncedToCustomerOs resets all changes to the "synced_to_customer_os" field.
func (m *PageViewMutation) ResetSyncedToCustomerOs() {
	m.synced_to_customer_os = nil
}

// SetStartTstamp sets the "start_tstamp" field.
func (m *PageViewMutation) SetStartTstamp(t time.Time) {
	m.start_tstamp = &t
}

// StartTstamp returns the value of the "start_tstamp" field in the mutation.
func (m *PageViewMutation) StartTstamp() (r time.Time, exists bool) {
	v := m.start_tstamp
	if v == nil {
		return
	}
	return *v, true
}

// OldStartTstamp returns the old "start_tstamp" field's value of the PageView entity.
// If the PageView object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageViewMutation) OldStartTstamp(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartTstamp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartTstamp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartTstamp: %w", err)
	}
	return oldValue.StartTstamp, nil
}

// ResetStartTstamp resets all changes to the "start_tstamp" field.
func (m *PageViewMutation) ResetStartTstamp() {
	m.start_tstamp = nil
}

// SetEndTstamp sets the "end_tstamp" field.
func (m *PageViewMutation) SetEndTstamp(t time.Time) {
	m.end_tstamp = &t
}

// EndTstamp returns the value of the "end_tstamp" field in the mutation.
func (m *PageViewMutation) EndTstamp() (r time.Time, exists bool) {
	v := m.end_tstamp
	if v == nil {
		return
	}
	return *v, true
}

// OldEndTstamp returns the old "end_tstamp" field's value of the PageView entity.
// If the PageView object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageViewMutation) OldEndTstamp(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndTstamp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndTstamp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndTstamp: %w", err)
	}
	return oldValue.EndTstamp, nil
}

// ResetEndTstamp resets all changes to the "end_tstamp" field.
func (m *PageViewMutation) ResetEndTstamp() {
	m.end_tstamp = nil
}

// SetVisitorID sets the "visitor_id" field.
func (m *PageViewMutation) SetVisitorID(s string) {
	m.visitor_id = &s
}

// VisitorID returns the value of the "visitor_id" field in the mutation.
func (m *PageViewMutation) VisitorID() (r string, exists bool) {
	v := m.visitor_id
	if v == nil {
		return
	}
	return *v, true
}

// OldVisitorID returns the old "visitor_id" field's value of the PageView entity.
// If the PageView object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageViewMutation) OldVisitorID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVisitorID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVisitorID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVisitorID: %w", err)
	}
	return oldValue.VisitorID, nil
}

// ClearVisitorID clears the value of the "visitor_id" field.
func (m *PageViewMutation) ClearVisitorID() {
	m.visitor_id = nil
	m.clearedFields[pageview.FieldVisitorID] = struct{}{}
}

// VisitorIDCleared returns if the "visitor_id" field was cleared in this mutation.
func (m *PageViewMutation) VisitorIDCleared() bool {
	_, ok := m.clearedFields[pageview.FieldVisitorID]
	return ok
}

// ResetVisitorID resets all changes to the "visitor_id" field.
func (m *PageViewMutation) ResetVisitorID() {
	m.visitor_id = nil
	delete(m.clearedFields, pageview.FieldVisitorID)
}

// SetCustomerOsContactID sets the "customer_os_contact_id" field.
func (m *PageViewMutation) SetCustomerOsContactID(s string) {
	m.customer_os_contact_id = &s
}

// CustomerOsContactID returns the value of the "customer_os_contact_id" field in the mutation.
func (m *PageViewMutation) CustomerOsContactID() (r string, exists bool) {
	v := m.customer_os_contact_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCustomerOsContactID returns the old "customer_os_contact_id" field's value of the PageView entity.
// If the PageView object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageViewMutation) OldCustomerOsContactID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCustomerOsContactID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCustomerOsContactID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCustomerOsContactID: %w", err)
	}
	return oldValue.CustomerOsContactID, nil
}

// ClearCustomerOsContactID clears the value of the "customer_os_contact_id" field.
func (m *PageViewMutation) ClearCustomerOsContactID() {
	m.customer_os_contact_id = nil
	m.clearedFields[pageview.FieldCustomerOsContactID] = struct{}{}
}

// CustomerOsContactIDCleared returns if the "customer_os_contact_id" field was cleared in this mutation.
func (m *PageViewMutation) CustomerOsContactIDCleared() bool {
	_, ok := m.clearedFields[pageview.FieldCustomerOsContactID]
	return ok
}

// ResetCustomerOsContactID resets all changes to the "customer_os_contact_id" field.
func (m *PageViewMutation) ResetCustomerOsContactID() {
	m.customer_os_contact_id = nil
	delete(m.clearedFields, pageview.FieldCustomerOsContactID)
}

// SetDomainUserid sets the "domain_userid" field.
func (m *PageViewMutation) SetDomainUserid(s string) {
	m.domain_userid = &s
}

// DomainUserid returns the value of the "domain_userid" field in the mutation.
func (m *PageViewMutation) DomainUserid() (r string, exists bool) {
	v := m.domain_userid
	if v == nil {
		return
	}
	return *v, true
}

// OldDomainUserid returns the old "domain_userid" field's value of the PageView entity.
// If the PageView object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageViewMutation) OldDomainUserid(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDomainUserid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDomainUserid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDomainUserid: %w", err)
	}
	return oldValue.DomainUserid, nil
}

// ResetDomainUserid resets all changes to the "domain_userid" field.
func (m *PageViewMutation) ResetDomainUserid() {
	m.domain_userid = nil
}

// SetNetworkUserid sets the "network_userid" field.
func (m *PageViewMutation) SetNetworkUserid(s string) {
	m.network_userid = &s
}

// NetworkUserid returns the value of the "network_userid" field in the mutation.
func (m *PageViewMutation) NetworkUserid() (r string, exists bool) {
	v := m.network_userid
	if v == nil {
		return
	}
	return *v, true
}

// OldNetworkUserid returns the old "network_userid" field's value of the PageView entity.
// If the PageView object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageViewMutation) OldNetworkUserid(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNetworkUserid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNetworkUserid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNetworkUserid: %w", err)
	}
	return oldValue.NetworkUserid, nil
}

// ResetNetworkUserid resets all changes to the "network_userid" field.
func (m *PageViewMutation) ResetNetworkUserid() {
	m.network_userid = nil
}

// SetDomainSessionid sets the "domain_sessionid" field.
func (m *PageViewMutation) SetDomainSessionid(i int) {
	m.domain_sessionid = &i
	m.adddomain_sessionid = nil
}

// DomainSessionid returns the value of the "domain_sessionid" field in the mutation.
func (m *PageViewMutation) DomainSessionid() (r int, exists bool) {
	v := m.domain_sessionid
	if v == nil {
		return
	}
	return *v, true
}

// OldDomainSessionid returns the old "domain_sessionid" field's value of the PageView entity.
// If the PageView object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageViewMutation) OldDomainSessionid(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDomainSessionid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDomainSessionid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDomainSessionid: %w", err)
	}
	return oldValue.DomainSessionid, nil
}

// AddDomainSessionid adds i to the "domain_sessionid" field.
func (m *PageViewMutation) AddDomainSessionid(i int) {
	if m.adddomain_sessionid != nil {
		*m.adddomain_sessionid += i
	} else {
		m.adddomain_sessionid = &i
	}
}

// AddedDomainSessionid returns the value that was added to the "domain_sessionid" field in this mutation.
func (m *PageViewMutation) AddedDomainSessionid() (r int, exists bool) {
	v := m.adddomain_sessionid
	if v == nil {
		return
	}
	return *v, true
}

// ResetDomainSessionid resets all changes to the "domain_sessionid" field.
func (m *PageViewMutation) ResetDomainSessionid() {
	m.domain_sessionid = nil
	m.adddomain_sessionid = nil
}

// SetDomainSessionidx sets the "domain_sessionidx" field.
func (m *PageViewMutation) SetDomainSessionidx(i int) {
	m.domain_sessionidx = &i
	m.adddomain_sessionidx = nil
}

// DomainSessionidx returns the value of the "domain_sessionidx" field in the mutation.
func (m *PageViewMutation) DomainSessionidx() (r int, exists bool) {
	v := m.domain_sessionidx
	if v == nil {
		return
	}
	return *v, true
}

// OldDomainSessionidx returns the old "domain_sessionidx" field's value of the PageView entity.
// If the PageView object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageViewMutation) OldDomainSessionidx(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDomainSessionidx is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDomainSessionidx requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDomainSessionidx: %w", err)
	}
	return oldValue.DomainSessionidx, nil
}

// AddDomainSessionidx adds i to the "domain_sessionidx" field.
func (m *PageViewMutation) AddDomainSessionidx(i int) {
	if m.adddomain_sessionidx != nil {
		*m.adddomain_sessionidx += i
	} else {
		m.adddomain_sessionidx = &i
	}
}

// AddedDomainSessionidx returns the value that was added to the "domain_sessionidx" field in this mutation.
func (m *PageViewMutation) AddedDomainSessionidx() (r int, exists bool) {
	v := m.adddomain_sessionidx
	if v == nil {
		return
	}
	return *v, true
}

// ResetDomainSessionidx resets all changes to the "domain_sessionidx" field.
func (m *PageViewMutation) ResetDomainSessionidx() {
	m.domain_sessionidx = nil
	m.adddomain_sessionidx = nil
}

// SetPageViewsInSession sets the "page_views_in_session" field.
func (m *PageViewMutation) SetPageViewsInSession(i int) {
	m.page_views_in_session = &i
	m.addpage_views_in_session = nil
}

// PageViewsInSession returns the value of the "page_views_in_session" field in the mutation.
func (m *PageViewMutation) PageViewsInSession() (r int, exists bool) {
	v := m.page_views_in_session
	if v == nil {
		return
	}
	return *v, true
}

// OldPageViewsInSession returns the old "page_views_in_session" field's value of the PageView entity.
// If the PageView object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageViewMutation) OldPageViewsInSession(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPageViewsInSession is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPageViewsInSession requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPageViewsInSession: %w", err)
	}
	return oldValue.PageViewsInSession, nil
}

// AddPageViewsInSession adds i to the "page_views_in_session" field.
func (m *PageViewMutation) AddPageViewsInSession(i int) {
	if m.addpage_views_in_session != nil {
		*m.addpage_views_in_session += i
	} else {
		m.addpage_views_in_session = &i
	}
}

// AddedPageViewsInSession returns the value that was added to the "page_views_in_session" field in this mutation.
func (m *PageViewMutation) AddedPageViewsInSession() (r int, exists bool) {
	v := m.addpage_views_in_session
	if v == nil {
		return
	}
	return *v, true
}

// ResetPageViewsInSession resets all changes to the "page_views_in_session" field.
func (m *PageViewMutation) ResetPageViewsInSession() {
	m.page_views_in_session = nil
	m.addpage_views_in_session = nil
}

// SetPageViewInSessionIndex sets the "page_view_in_session_index" field.
func (m *PageViewMutation) SetPageViewInSessionIndex(i int) {
	m.page_view_in_session_index = &i
	m.addpage_view_in_session_index = nil
}

// PageViewInSessionIndex returns the value of the "page_view_in_session_index" field in the mutation.
func (m *PageViewMutation) PageViewInSessionIndex() (r int, exists bool) {
	v := m.page_view_in_session_index
	if v == nil {
		return
	}
	return *v, true
}

// OldPageViewInSessionIndex returns the old "page_view_in_session_index" field's value of the PageView entity.
// If the PageView object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageViewMutation) OldPageViewInSessionIndex(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPageViewInSessionIndex is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPageViewInSessionIndex requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPageViewInSessionIndex: %w", err)
	}
	return oldValue.PageViewInSessionIndex, nil
}

// AddPageViewInSessionIndex adds i to the "page_view_in_session_index" field.
func (m *PageViewMutation) AddPageViewInSessionIndex(i int) {
	if m.addpage_view_in_session_index != nil {
		*m.addpage_view_in_session_index += i
	} else {
		m.addpage_view_in_session_index = &i
	}
}

// AddedPageViewInSessionIndex returns the value that was added to the "page_view_in_session_index" field in this mutation.
func (m *PageViewMutation) AddedPageViewInSessionIndex() (r int, exists bool) {
	v := m.addpage_view_in_session_index
	if v == nil {
		return
	}
	return *v, true
}

// ResetPageViewInSessionIndex resets all changes to the "page_view_in_session_index" field.
func (m *PageViewMutation) ResetPageViewInSessionIndex() {
	m.page_view_in_session_index = nil
	m.addpage_view_in_session_index = nil
}

// SetEngagedTimeInS sets the "engaged_time_in_s" field.
func (m *PageViewMutation) SetEngagedTimeInS(i int) {
	m.engaged_time_in_s = &i
	m.addengaged_time_in_s = nil
}

// EngagedTimeInS returns the value of the "engaged_time_in_s" field in the mutation.
func (m *PageViewMutation) EngagedTimeInS() (r int, exists bool) {
	v := m.engaged_time_in_s
	if v == nil {
		return
	}
	return *v, true
}

// OldEngagedTimeInS returns the old "engaged_time_in_s" field's value of the PageView entity.
// If the PageView object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageViewMutation) OldEngagedTimeInS(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEngagedTimeInS is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEngagedTimeInS requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEngagedTimeInS: %w", err)
	}
	return oldValue.EngagedTimeInS, nil
}

// AddEngagedTimeInS adds i to the "engaged_time_in_s" field.
func (m *PageViewMutation) AddEngagedTimeInS(i int) {
	if m.addengaged_time_in_s != nil {
		*m.addengaged_time_in_s += i
	} else {
		m.addengaged_time_in_s = &i
	}
}

// AddedEngagedTimeInS returns the value that was added to the "engaged_time_in_s" field in this mutation.
func (m *PageViewMutation) AddedEngagedTimeInS() (r int, exists bool) {
	v := m.addengaged_time_in_s
	if v == nil {
		return
	}
	return *v, true
}

// ResetEngagedTimeInS resets all changes to the "engaged_time_in_s" field.
func (m *PageViewMutation) ResetEngagedTimeInS() {
	m.engaged_time_in_s = nil
	m.addengaged_time_in_s = nil
}

// SetPageURL sets the "page_url" field.
func (m *PageViewMutation) SetPageURL(s string) {
	m.page_url = &s
}

// PageURL returns the value of the "page_url" field in the mutation.
func (m *PageViewMutation) PageURL() (r string, exists bool) {
	v := m.page_url
	if v == nil {
		return
	}
	return *v, true
}

// OldPageURL returns the old "page_url" field's value of the PageView entity.
// If the PageView object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageViewMutation) OldPageURL(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPageURL is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPageURL requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPageURL: %w", err)
	}
	return oldValue.PageURL, nil
}

// ResetPageURL resets all changes to the "page_url" field.
func (m *PageViewMutation) ResetPageURL() {
	m.page_url = nil
}

// SetPageTitle sets the "page_title" field.
func (m *PageViewMutation) SetPageTitle(s string) {
	m.page_title = &s
}

// PageTitle returns the value of the "page_title" field in the mutation.
func (m *PageViewMutation) PageTitle() (r string, exists bool) {
	v := m.page_title
	if v == nil {
		return
	}
	return *v, true
}

// OldPageTitle returns the old "page_title" field's value of the PageView entity.
// If the PageView object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *PageViewMutation) OldPageTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPageTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPageTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPageTitle: %w", err)
	}
	return oldValue.PageTitle, nil
}

// ResetPageTitle resets all changes to the "page_title" field.
func (m *PageViewMutation) ResetPageTitle() {
	m.page_title = nil
}

// Where appends a list predicates to the PageViewMutation builder.
func (m *PageViewMutation) Where(ps ...predicate.PageView) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *PageViewMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (PageView).
func (m *PageViewMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *PageViewMutation) Fields() []string {
	fields := make([]string, 0, 19)
	if m.app_id != nil {
		fields = append(fields, pageview.FieldAppID)
	}
	if m.name_tracker != nil {
		fields = append(fields, pageview.FieldNameTracker)
	}
	if m.tenant != nil {
		fields = append(fields, pageview.FieldTenant)
	}
	if m.page_view_id != nil {
		fields = append(fields, pageview.FieldPageViewID)
	}
	if m.event_id != nil {
		fields = append(fields, pageview.FieldEventID)
	}
	if m.synced_to_customer_os != nil {
		fields = append(fields, pageview.FieldSyncedToCustomerOs)
	}
	if m.start_tstamp != nil {
		fields = append(fields, pageview.FieldStartTstamp)
	}
	if m.end_tstamp != nil {
		fields = append(fields, pageview.FieldEndTstamp)
	}
	if m.visitor_id != nil {
		fields = append(fields, pageview.FieldVisitorID)
	}
	if m.customer_os_contact_id != nil {
		fields = append(fields, pageview.FieldCustomerOsContactID)
	}
	if m.domain_userid != nil {
		fields = append(fields, pageview.FieldDomainUserid)
	}
	if m.network_userid != nil {
		fields = append(fields, pageview.FieldNetworkUserid)
	}
	if m.domain_sessionid != nil {
		fields = append(fields, pageview.FieldDomainSessionid)
	}
	if m.domain_sessionidx != nil {
		fields = append(fields, pageview.FieldDomainSessionidx)
	}
	if m.page_views_in_session != nil {
		fields = append(fields, pageview.FieldPageViewsInSession)
	}
	if m.page_view_in_session_index != nil {
		fields = append(fields, pageview.FieldPageViewInSessionIndex)
	}
	if m.engaged_time_in_s != nil {
		fields = append(fields, pageview.FieldEngagedTimeInS)
	}
	if m.page_url != nil {
		fields = append(fields, pageview.FieldPageURL)
	}
	if m.page_title != nil {
		fields = append(fields, pageview.FieldPageTitle)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *PageViewMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case pageview.FieldAppID:
		return m.AppID()
	case pageview.FieldNameTracker:
		return m.NameTracker()
	case pageview.FieldTenant:
		return m.Tenant()
	case pageview.FieldPageViewID:
		return m.PageViewID()
	case pageview.FieldEventID:
		return m.EventID()
	case pageview.FieldSyncedToCustomerOs:
		return m.SyncedToCustomerOs()
	case pageview.FieldStartTstamp:
		return m.StartTstamp()
	case pageview.FieldEndTstamp:
		return m.EndTstamp()
	case pageview.FieldVisitorID:
		return m.VisitorID()
	case pageview.FieldCustomerOsContactID:
		return m.CustomerOsContactID()
	case pageview.FieldDomainUserid:
		return m.DomainUserid()
	case pageview.FieldNetworkUserid:
		return m.NetworkUserid()
	case pageview.FieldDomainSessionid:
		return m.DomainSessionid()
	case pageview.FieldDomainSessionidx:
		return m.DomainSessionidx()
	case pageview.FieldPageViewsInSession:
		return m.PageViewsInSession()
	case pageview.FieldPageViewInSessionIndex:
		return m.PageViewInSessionIndex()
	case pageview.FieldEngagedTimeInS:
		return m.EngagedTimeInS()
	case pageview.FieldPageURL:
		return m.PageURL()
	case pageview.FieldPageTitle:
		return m.PageTitle()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *PageViewMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case pageview.FieldAppID:
		return m.OldAppID(ctx)
	case pageview.FieldNameTracker:
		return m.OldNameTracker(ctx)
	case pageview.FieldTenant:
		return m.OldTenant(ctx)
	case pageview.FieldPageViewID:
		return m.OldPageViewID(ctx)
	case pageview.FieldEventID:
		return m.OldEventID(ctx)
	case pageview.FieldSyncedToCustomerOs:
		return m.OldSyncedToCustomerOs(ctx)
	case pageview.FieldStartTstamp:
		return m.OldStartTstamp(ctx)
	case pageview.FieldEndTstamp:
		return m.OldEndTstamp(ctx)
	case pageview.FieldVisitorID:
		return m.OldVisitorID(ctx)
	case pageview.FieldCustomerOsContactID:
		return m.OldCustomerOsContactID(ctx)
	case pageview.FieldDomainUserid:
		return m.OldDomainUserid(ctx)
	case pageview.FieldNetworkUserid:
		return m.OldNetworkUserid(ctx)
	case pageview.FieldDomainSessionid:
		return m.OldDomainSessionid(ctx)
	case pageview.FieldDomainSessionidx:
		return m.OldDomainSessionidx(ctx)
	case pageview.FieldPageViewsInSession:
		return m.OldPageViewsInSession(ctx)
	case pageview.FieldPageViewInSessionIndex:
		return m.OldPageViewInSessionIndex(ctx)
	case pageview.FieldEngagedTimeInS:
		return m.OldEngagedTimeInS(ctx)
	case pageview.FieldPageURL:
		return m.OldPageURL(ctx)
	case pageview.FieldPageTitle:
		return m.OldPageTitle(ctx)
	}
	return nil, fmt.Errorf("unknown PageView field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PageViewMutation) SetField(name string, value ent.Value) error {
	switch name {
	case pageview.FieldAppID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case pageview.FieldNameTracker:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNameTracker(v)
		return nil
	case pageview.FieldTenant:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenant(v)
		return nil
	case pageview.FieldPageViewID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPageViewID(v)
		return nil
	case pageview.FieldEventID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEventID(v)
		return nil
	case pageview.FieldSyncedToCustomerOs:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSyncedToCustomerOs(v)
		return nil
	case pageview.FieldStartTstamp:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartTstamp(v)
		return nil
	case pageview.FieldEndTstamp:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndTstamp(v)
		return nil
	case pageview.FieldVisitorID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVisitorID(v)
		return nil
	case pageview.FieldCustomerOsContactID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCustomerOsContactID(v)
		return nil
	case pageview.FieldDomainUserid:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDomainUserid(v)
		return nil
	case pageview.FieldNetworkUserid:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNetworkUserid(v)
		return nil
	case pageview.FieldDomainSessionid:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDomainSessionid(v)
		return nil
	case pageview.FieldDomainSessionidx:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDomainSessionidx(v)
		return nil
	case pageview.FieldPageViewsInSession:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPageViewsInSession(v)
		return nil
	case pageview.FieldPageViewInSessionIndex:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPageViewInSessionIndex(v)
		return nil
	case pageview.FieldEngagedTimeInS:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEngagedTimeInS(v)
		return nil
	case pageview.FieldPageURL:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPageURL(v)
		return nil
	case pageview.FieldPageTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPageTitle(v)
		return nil
	}
	return fmt.Errorf("unknown PageView field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *PageViewMutation) AddedFields() []string {
	var fields []string
	if m.adddomain_sessionid != nil {
		fields = append(fields, pageview.FieldDomainSessionid)
	}
	if m.adddomain_sessionidx != nil {
		fields = append(fields, pageview.FieldDomainSessionidx)
	}
	if m.addpage_views_in_session != nil {
		fields = append(fields, pageview.FieldPageViewsInSession)
	}
	if m.addpage_view_in_session_index != nil {
		fields = append(fields, pageview.FieldPageViewInSessionIndex)
	}
	if m.addengaged_time_in_s != nil {
		fields = append(fields, pageview.FieldEngagedTimeInS)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *PageViewMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case pageview.FieldDomainSessionid:
		return m.AddedDomainSessionid()
	case pageview.FieldDomainSessionidx:
		return m.AddedDomainSessionidx()
	case pageview.FieldPageViewsInSession:
		return m.AddedPageViewsInSession()
	case pageview.FieldPageViewInSessionIndex:
		return m.AddedPageViewInSessionIndex()
	case pageview.FieldEngagedTimeInS:
		return m.AddedEngagedTimeInS()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *PageViewMutation) AddField(name string, value ent.Value) error {
	switch name {
	case pageview.FieldDomainSessionid:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDomainSessionid(v)
		return nil
	case pageview.FieldDomainSessionidx:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDomainSessionidx(v)
		return nil
	case pageview.FieldPageViewsInSession:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPageViewsInSession(v)
		return nil
	case pageview.FieldPageViewInSessionIndex:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPageViewInSessionIndex(v)
		return nil
	case pageview.FieldEngagedTimeInS:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddEngagedTimeInS(v)
		return nil
	}
	return fmt.Errorf("unknown PageView numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *PageViewMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(pageview.FieldVisitorID) {
		fields = append(fields, pageview.FieldVisitorID)
	}
	if m.FieldCleared(pageview.FieldCustomerOsContactID) {
		fields = append(fields, pageview.FieldCustomerOsContactID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *PageViewMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *PageViewMutation) ClearField(name string) error {
	switch name {
	case pageview.FieldVisitorID:
		m.ClearVisitorID()
		return nil
	case pageview.FieldCustomerOsContactID:
		m.ClearCustomerOsContactID()
		return nil
	}
	return fmt.Errorf("unknown PageView nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *PageViewMutation) ResetField(name string) error {
	switch name {
	case pageview.FieldAppID:
		m.ResetAppID()
		return nil
	case pageview.FieldNameTracker:
		m.ResetNameTracker()
		return nil
	case pageview.FieldTenant:
		m.ResetTenant()
		return nil
	case pageview.FieldPageViewID:
		m.ResetPageViewID()
		return nil
	case pageview.FieldEventID:
		m.ResetEventID()
		return nil
	case pageview.FieldSyncedToCustomerOs:
		m.ResetSyncedToCustomerOs()
		return nil
	case pageview.FieldStartTstamp:
		m.ResetStartTstamp()
		return nil
	case pageview.FieldEndTstamp:
		m.ResetEndTstamp()
		return nil
	case pageview.FieldVisitorID:
		m.ResetVisitorID()
		return nil
	case pageview.FieldCustomerOsContactID:
		m.ResetCustomerOsContactID()
		return nil
	case pageview.FieldDomainUserid:
		m.ResetDomainUserid()
		return nil
	case pageview.FieldNetworkUserid:
		m.ResetNetworkUserid()
		return nil
	case pageview.FieldDomainSessionid:
		m.ResetDomainSessionid()
		return nil
	case pageview.FieldDomainSessionidx:
		m.ResetDomainSessionidx()
		return nil
	case pageview.FieldPageViewsInSession:
		m.ResetPageViewsInSession()
		return nil
	case pageview.FieldPageViewInSessionIndex:
		m.ResetPageViewInSessionIndex()
		return nil
	case pageview.FieldEngagedTimeInS:
		m.ResetEngagedTimeInS()
		return nil
	case pageview.FieldPageURL:
		m.ResetPageURL()
		return nil
	case pageview.FieldPageTitle:
		m.ResetPageTitle()
		return nil
	}
	return fmt.Errorf("unknown PageView field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *PageViewMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *PageViewMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *PageViewMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *PageViewMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *PageViewMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *PageViewMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *PageViewMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown PageView unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *PageViewMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown PageView edge %s", name)
}

// SessionMutation represents an operation that mutates the Session nodes in the graph.
type SessionMutation struct {
	config
	op                     Op
	typ                    string
	id                     *int
	app_id                 *string
	name_tracker           *string
	tenant                 *string
	domain_sessionid       *string
	domain_sessionidx      *int
	adddomain_sessionidx   *int
	synced_to_customer_os  *bool
	start_tstamp           *time.Time
	end_tstamp             *time.Time
	domain_userid          *string
	network_userid         *string
	visitor_id             *string
	customer_os_contact_id *string
	clearedFields          map[string]struct{}
	done                   bool
	oldValue               func(context.Context) (*Session, error)
	predicates             []predicate.Session
}

var _ ent.Mutation = (*SessionMutation)(nil)

// sessionOption allows management of the mutation configuration using functional options.
type sessionOption func(*SessionMutation)

// newSessionMutation creates new mutation for the Session entity.
func newSessionMutation(c config, op Op, opts ...sessionOption) *SessionMutation {
	m := &SessionMutation{
		config:        c,
		op:            op,
		typ:           TypeSession,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withSessionID sets the ID field of the mutation.
func withSessionID(id int) sessionOption {
	return func(m *SessionMutation) {
		var (
			err   error
			once  sync.Once
			value *Session
		)
		m.oldValue = func(ctx context.Context) (*Session, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Session.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withSession sets the old Session of the mutation.
func withSession(node *Session) sessionOption {
	return func(m *SessionMutation) {
		m.oldValue = func(context.Context) (*Session, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m SessionMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m SessionMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("gen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *SessionMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *SessionMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Session.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAppID sets the "app_id" field.
func (m *SessionMutation) SetAppID(s string) {
	m.app_id = &s
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *SessionMutation) AppID() (r string, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldAppID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ResetAppID resets all changes to the "app_id" field.
func (m *SessionMutation) ResetAppID() {
	m.app_id = nil
}

// SetNameTracker sets the "name_tracker" field.
func (m *SessionMutation) SetNameTracker(s string) {
	m.name_tracker = &s
}

// NameTracker returns the value of the "name_tracker" field in the mutation.
func (m *SessionMutation) NameTracker() (r string, exists bool) {
	v := m.name_tracker
	if v == nil {
		return
	}
	return *v, true
}

// OldNameTracker returns the old "name_tracker" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldNameTracker(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNameTracker is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNameTracker requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNameTracker: %w", err)
	}
	return oldValue.NameTracker, nil
}

// ResetNameTracker resets all changes to the "name_tracker" field.
func (m *SessionMutation) ResetNameTracker() {
	m.name_tracker = nil
}

// SetTenant sets the "tenant" field.
func (m *SessionMutation) SetTenant(s string) {
	m.tenant = &s
}

// Tenant returns the value of the "tenant" field in the mutation.
func (m *SessionMutation) Tenant() (r string, exists bool) {
	v := m.tenant
	if v == nil {
		return
	}
	return *v, true
}

// OldTenant returns the old "tenant" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldTenant(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTenant is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTenant requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenant: %w", err)
	}
	return oldValue.Tenant, nil
}

// ResetTenant resets all changes to the "tenant" field.
func (m *SessionMutation) ResetTenant() {
	m.tenant = nil
}

// SetDomainSessionid sets the "domain_sessionid" field.
func (m *SessionMutation) SetDomainSessionid(s string) {
	m.domain_sessionid = &s
}

// DomainSessionid returns the value of the "domain_sessionid" field in the mutation.
func (m *SessionMutation) DomainSessionid() (r string, exists bool) {
	v := m.domain_sessionid
	if v == nil {
		return
	}
	return *v, true
}

// OldDomainSessionid returns the old "domain_sessionid" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldDomainSessionid(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDomainSessionid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDomainSessionid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDomainSessionid: %w", err)
	}
	return oldValue.DomainSessionid, nil
}

// ResetDomainSessionid resets all changes to the "domain_sessionid" field.
func (m *SessionMutation) ResetDomainSessionid() {
	m.domain_sessionid = nil
}

// SetDomainSessionidx sets the "domain_sessionidx" field.
func (m *SessionMutation) SetDomainSessionidx(i int) {
	m.domain_sessionidx = &i
	m.adddomain_sessionidx = nil
}

// DomainSessionidx returns the value of the "domain_sessionidx" field in the mutation.
func (m *SessionMutation) DomainSessionidx() (r int, exists bool) {
	v := m.domain_sessionidx
	if v == nil {
		return
	}
	return *v, true
}

// OldDomainSessionidx returns the old "domain_sessionidx" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldDomainSessionidx(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDomainSessionidx is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDomainSessionidx requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDomainSessionidx: %w", err)
	}
	return oldValue.DomainSessionidx, nil
}

// AddDomainSessionidx adds i to the "domain_sessionidx" field.
func (m *SessionMutation) AddDomainSessionidx(i int) {
	if m.adddomain_sessionidx != nil {
		*m.adddomain_sessionidx += i
	} else {
		m.adddomain_sessionidx = &i
	}
}

// AddedDomainSessionidx returns the value that was added to the "domain_sessionidx" field in this mutation.
func (m *SessionMutation) AddedDomainSessionidx() (r int, exists bool) {
	v := m.adddomain_sessionidx
	if v == nil {
		return
	}
	return *v, true
}

// ResetDomainSessionidx resets all changes to the "domain_sessionidx" field.
func (m *SessionMutation) ResetDomainSessionidx() {
	m.domain_sessionidx = nil
	m.adddomain_sessionidx = nil
}

// SetSyncedToCustomerOs sets the "synced_to_customer_os" field.
func (m *SessionMutation) SetSyncedToCustomerOs(b bool) {
	m.synced_to_customer_os = &b
}

// SyncedToCustomerOs returns the value of the "synced_to_customer_os" field in the mutation.
func (m *SessionMutation) SyncedToCustomerOs() (r bool, exists bool) {
	v := m.synced_to_customer_os
	if v == nil {
		return
	}
	return *v, true
}

// OldSyncedToCustomerOs returns the old "synced_to_customer_os" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldSyncedToCustomerOs(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSyncedToCustomerOs is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSyncedToCustomerOs requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSyncedToCustomerOs: %w", err)
	}
	return oldValue.SyncedToCustomerOs, nil
}

// ResetSyncedToCustomerOs resets all changes to the "synced_to_customer_os" field.
func (m *SessionMutation) ResetSyncedToCustomerOs() {
	m.synced_to_customer_os = nil
}

// SetStartTstamp sets the "start_tstamp" field.
func (m *SessionMutation) SetStartTstamp(t time.Time) {
	m.start_tstamp = &t
}

// StartTstamp returns the value of the "start_tstamp" field in the mutation.
func (m *SessionMutation) StartTstamp() (r time.Time, exists bool) {
	v := m.start_tstamp
	if v == nil {
		return
	}
	return *v, true
}

// OldStartTstamp returns the old "start_tstamp" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldStartTstamp(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStartTstamp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStartTstamp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStartTstamp: %w", err)
	}
	return oldValue.StartTstamp, nil
}

// ResetStartTstamp resets all changes to the "start_tstamp" field.
func (m *SessionMutation) ResetStartTstamp() {
	m.start_tstamp = nil
}

// SetEndTstamp sets the "end_tstamp" field.
func (m *SessionMutation) SetEndTstamp(t time.Time) {
	m.end_tstamp = &t
}

// EndTstamp returns the value of the "end_tstamp" field in the mutation.
func (m *SessionMutation) EndTstamp() (r time.Time, exists bool) {
	v := m.end_tstamp
	if v == nil {
		return
	}
	return *v, true
}

// OldEndTstamp returns the old "end_tstamp" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldEndTstamp(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEndTstamp is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEndTstamp requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEndTstamp: %w", err)
	}
	return oldValue.EndTstamp, nil
}

// ResetEndTstamp resets all changes to the "end_tstamp" field.
func (m *SessionMutation) ResetEndTstamp() {
	m.end_tstamp = nil
}

// SetDomainUserid sets the "domain_userid" field.
func (m *SessionMutation) SetDomainUserid(s string) {
	m.domain_userid = &s
}

// DomainUserid returns the value of the "domain_userid" field in the mutation.
func (m *SessionMutation) DomainUserid() (r string, exists bool) {
	v := m.domain_userid
	if v == nil {
		return
	}
	return *v, true
}

// OldDomainUserid returns the old "domain_userid" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldDomainUserid(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDomainUserid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDomainUserid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDomainUserid: %w", err)
	}
	return oldValue.DomainUserid, nil
}

// ResetDomainUserid resets all changes to the "domain_userid" field.
func (m *SessionMutation) ResetDomainUserid() {
	m.domain_userid = nil
}

// SetNetworkUserid sets the "network_userid" field.
func (m *SessionMutation) SetNetworkUserid(s string) {
	m.network_userid = &s
}

// NetworkUserid returns the value of the "network_userid" field in the mutation.
func (m *SessionMutation) NetworkUserid() (r string, exists bool) {
	v := m.network_userid
	if v == nil {
		return
	}
	return *v, true
}

// OldNetworkUserid returns the old "network_userid" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldNetworkUserid(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNetworkUserid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNetworkUserid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNetworkUserid: %w", err)
	}
	return oldValue.NetworkUserid, nil
}

// ResetNetworkUserid resets all changes to the "network_userid" field.
func (m *SessionMutation) ResetNetworkUserid() {
	m.network_userid = nil
}

// SetVisitorID sets the "visitor_id" field.
func (m *SessionMutation) SetVisitorID(s string) {
	m.visitor_id = &s
}

// VisitorID returns the value of the "visitor_id" field in the mutation.
func (m *SessionMutation) VisitorID() (r string, exists bool) {
	v := m.visitor_id
	if v == nil {
		return
	}
	return *v, true
}

// OldVisitorID returns the old "visitor_id" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldVisitorID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVisitorID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVisitorID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVisitorID: %w", err)
	}
	return oldValue.VisitorID, nil
}

// ClearVisitorID clears the value of the "visitor_id" field.
func (m *SessionMutation) ClearVisitorID() {
	m.visitor_id = nil
	m.clearedFields[session.FieldVisitorID] = struct{}{}
}

// VisitorIDCleared returns if the "visitor_id" field was cleared in this mutation.
func (m *SessionMutation) VisitorIDCleared() bool {
	_, ok := m.clearedFields[session.FieldVisitorID]
	return ok
}

// ResetVisitorID resets all changes to the "visitor_id" field.
func (m *SessionMutation) ResetVisitorID() {
	m.visitor_id = nil
	delete(m.clearedFields, session.FieldVisitorID)
}

// SetCustomerOsContactID sets the "customer_os_contact_id" field.
func (m *SessionMutation) SetCustomerOsContactID(s string) {
	m.customer_os_contact_id = &s
}

// CustomerOsContactID returns the value of the "customer_os_contact_id" field in the mutation.
func (m *SessionMutation) CustomerOsContactID() (r string, exists bool) {
	v := m.customer_os_contact_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCustomerOsContactID returns the old "customer_os_contact_id" field's value of the Session entity.
// If the Session object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *SessionMutation) OldCustomerOsContactID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCustomerOsContactID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCustomerOsContactID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCustomerOsContactID: %w", err)
	}
	return oldValue.CustomerOsContactID, nil
}

// ClearCustomerOsContactID clears the value of the "customer_os_contact_id" field.
func (m *SessionMutation) ClearCustomerOsContactID() {
	m.customer_os_contact_id = nil
	m.clearedFields[session.FieldCustomerOsContactID] = struct{}{}
}

// CustomerOsContactIDCleared returns if the "customer_os_contact_id" field was cleared in this mutation.
func (m *SessionMutation) CustomerOsContactIDCleared() bool {
	_, ok := m.clearedFields[session.FieldCustomerOsContactID]
	return ok
}

// ResetCustomerOsContactID resets all changes to the "customer_os_contact_id" field.
func (m *SessionMutation) ResetCustomerOsContactID() {
	m.customer_os_contact_id = nil
	delete(m.clearedFields, session.FieldCustomerOsContactID)
}

// Where appends a list predicates to the SessionMutation builder.
func (m *SessionMutation) Where(ps ...predicate.Session) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *SessionMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Session).
func (m *SessionMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *SessionMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m.app_id != nil {
		fields = append(fields, session.FieldAppID)
	}
	if m.name_tracker != nil {
		fields = append(fields, session.FieldNameTracker)
	}
	if m.tenant != nil {
		fields = append(fields, session.FieldTenant)
	}
	if m.domain_sessionid != nil {
		fields = append(fields, session.FieldDomainSessionid)
	}
	if m.domain_sessionidx != nil {
		fields = append(fields, session.FieldDomainSessionidx)
	}
	if m.synced_to_customer_os != nil {
		fields = append(fields, session.FieldSyncedToCustomerOs)
	}
	if m.start_tstamp != nil {
		fields = append(fields, session.FieldStartTstamp)
	}
	if m.end_tstamp != nil {
		fields = append(fields, session.FieldEndTstamp)
	}
	if m.domain_userid != nil {
		fields = append(fields, session.FieldDomainUserid)
	}
	if m.network_userid != nil {
		fields = append(fields, session.FieldNetworkUserid)
	}
	if m.visitor_id != nil {
		fields = append(fields, session.FieldVisitorID)
	}
	if m.customer_os_contact_id != nil {
		fields = append(fields, session.FieldCustomerOsContactID)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *SessionMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case session.FieldAppID:
		return m.AppID()
	case session.FieldNameTracker:
		return m.NameTracker()
	case session.FieldTenant:
		return m.Tenant()
	case session.FieldDomainSessionid:
		return m.DomainSessionid()
	case session.FieldDomainSessionidx:
		return m.DomainSessionidx()
	case session.FieldSyncedToCustomerOs:
		return m.SyncedToCustomerOs()
	case session.FieldStartTstamp:
		return m.StartTstamp()
	case session.FieldEndTstamp:
		return m.EndTstamp()
	case session.FieldDomainUserid:
		return m.DomainUserid()
	case session.FieldNetworkUserid:
		return m.NetworkUserid()
	case session.FieldVisitorID:
		return m.VisitorID()
	case session.FieldCustomerOsContactID:
		return m.CustomerOsContactID()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *SessionMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case session.FieldAppID:
		return m.OldAppID(ctx)
	case session.FieldNameTracker:
		return m.OldNameTracker(ctx)
	case session.FieldTenant:
		return m.OldTenant(ctx)
	case session.FieldDomainSessionid:
		return m.OldDomainSessionid(ctx)
	case session.FieldDomainSessionidx:
		return m.OldDomainSessionidx(ctx)
	case session.FieldSyncedToCustomerOs:
		return m.OldSyncedToCustomerOs(ctx)
	case session.FieldStartTstamp:
		return m.OldStartTstamp(ctx)
	case session.FieldEndTstamp:
		return m.OldEndTstamp(ctx)
	case session.FieldDomainUserid:
		return m.OldDomainUserid(ctx)
	case session.FieldNetworkUserid:
		return m.OldNetworkUserid(ctx)
	case session.FieldVisitorID:
		return m.OldVisitorID(ctx)
	case session.FieldCustomerOsContactID:
		return m.OldCustomerOsContactID(ctx)
	}
	return nil, fmt.Errorf("unknown Session field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SessionMutation) SetField(name string, value ent.Value) error {
	switch name {
	case session.FieldAppID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case session.FieldNameTracker:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNameTracker(v)
		return nil
	case session.FieldTenant:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenant(v)
		return nil
	case session.FieldDomainSessionid:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDomainSessionid(v)
		return nil
	case session.FieldDomainSessionidx:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDomainSessionidx(v)
		return nil
	case session.FieldSyncedToCustomerOs:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSyncedToCustomerOs(v)
		return nil
	case session.FieldStartTstamp:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStartTstamp(v)
		return nil
	case session.FieldEndTstamp:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEndTstamp(v)
		return nil
	case session.FieldDomainUserid:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDomainUserid(v)
		return nil
	case session.FieldNetworkUserid:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNetworkUserid(v)
		return nil
	case session.FieldVisitorID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVisitorID(v)
		return nil
	case session.FieldCustomerOsContactID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCustomerOsContactID(v)
		return nil
	}
	return fmt.Errorf("unknown Session field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *SessionMutation) AddedFields() []string {
	var fields []string
	if m.adddomain_sessionidx != nil {
		fields = append(fields, session.FieldDomainSessionidx)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *SessionMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case session.FieldDomainSessionidx:
		return m.AddedDomainSessionidx()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *SessionMutation) AddField(name string, value ent.Value) error {
	switch name {
	case session.FieldDomainSessionidx:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDomainSessionidx(v)
		return nil
	}
	return fmt.Errorf("unknown Session numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *SessionMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(session.FieldVisitorID) {
		fields = append(fields, session.FieldVisitorID)
	}
	if m.FieldCleared(session.FieldCustomerOsContactID) {
		fields = append(fields, session.FieldCustomerOsContactID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *SessionMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *SessionMutation) ClearField(name string) error {
	switch name {
	case session.FieldVisitorID:
		m.ClearVisitorID()
		return nil
	case session.FieldCustomerOsContactID:
		m.ClearCustomerOsContactID()
		return nil
	}
	return fmt.Errorf("unknown Session nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *SessionMutation) ResetField(name string) error {
	switch name {
	case session.FieldAppID:
		m.ResetAppID()
		return nil
	case session.FieldNameTracker:
		m.ResetNameTracker()
		return nil
	case session.FieldTenant:
		m.ResetTenant()
		return nil
	case session.FieldDomainSessionid:
		m.ResetDomainSessionid()
		return nil
	case session.FieldDomainSessionidx:
		m.ResetDomainSessionidx()
		return nil
	case session.FieldSyncedToCustomerOs:
		m.ResetSyncedToCustomerOs()
		return nil
	case session.FieldStartTstamp:
		m.ResetStartTstamp()
		return nil
	case session.FieldEndTstamp:
		m.ResetEndTstamp()
		return nil
	case session.FieldDomainUserid:
		m.ResetDomainUserid()
		return nil
	case session.FieldNetworkUserid:
		m.ResetNetworkUserid()
		return nil
	case session.FieldVisitorID:
		m.ResetVisitorID()
		return nil
	case session.FieldCustomerOsContactID:
		m.ResetCustomerOsContactID()
		return nil
	}
	return fmt.Errorf("unknown Session field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *SessionMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *SessionMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *SessionMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *SessionMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *SessionMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *SessionMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *SessionMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Session unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *SessionMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Session edge %s", name)
}

// VisitorMutation represents an operation that mutates the Visitor nodes in the graph.
type VisitorMutation struct {
	config
	op                     Op
	typ                    string
	id                     *int
	app_id                 *string
	name_tracker           *string
	tenant                 *string
	visitor_id             *string
	customer_os_contact_id *string
	domain_userid          *string
	network_userid         *string
	page_views             *int
	addpage_views          *int
	sessions               *int
	addsessions            *int
	engaged_time_in_s      *int
	addengaged_time_in_s   *int
	synced_to_customer_os  *bool
	clearedFields          map[string]struct{}
	done                   bool
	oldValue               func(context.Context) (*Visitor, error)
	predicates             []predicate.Visitor
}

var _ ent.Mutation = (*VisitorMutation)(nil)

// visitorOption allows management of the mutation configuration using functional options.
type visitorOption func(*VisitorMutation)

// newVisitorMutation creates new mutation for the Visitor entity.
func newVisitorMutation(c config, op Op, opts ...visitorOption) *VisitorMutation {
	m := &VisitorMutation{
		config:        c,
		op:            op,
		typ:           TypeVisitor,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withVisitorID sets the ID field of the mutation.
func withVisitorID(id int) visitorOption {
	return func(m *VisitorMutation) {
		var (
			err   error
			once  sync.Once
			value *Visitor
		)
		m.oldValue = func(ctx context.Context) (*Visitor, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Visitor.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withVisitor sets the old Visitor of the mutation.
func withVisitor(node *Visitor) visitorOption {
	return func(m *VisitorMutation) {
		m.oldValue = func(context.Context) (*Visitor, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m VisitorMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m VisitorMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("gen: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *VisitorMutation) ID() (id int, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *VisitorMutation) IDs(ctx context.Context) ([]int, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []int{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Visitor.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetAppID sets the "app_id" field.
func (m *VisitorMutation) SetAppID(s string) {
	m.app_id = &s
}

// AppID returns the value of the "app_id" field in the mutation.
func (m *VisitorMutation) AppID() (r string, exists bool) {
	v := m.app_id
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "app_id" field's value of the Visitor entity.
// If the Visitor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VisitorMutation) OldAppID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldAppID: %w", err)
	}
	return oldValue.AppID, nil
}

// ResetAppID resets all changes to the "app_id" field.
func (m *VisitorMutation) ResetAppID() {
	m.app_id = nil
}

// SetNameTracker sets the "name_tracker" field.
func (m *VisitorMutation) SetNameTracker(s string) {
	m.name_tracker = &s
}

// NameTracker returns the value of the "name_tracker" field in the mutation.
func (m *VisitorMutation) NameTracker() (r string, exists bool) {
	v := m.name_tracker
	if v == nil {
		return
	}
	return *v, true
}

// OldNameTracker returns the old "name_tracker" field's value of the Visitor entity.
// If the Visitor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VisitorMutation) OldNameTracker(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNameTracker is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNameTracker requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNameTracker: %w", err)
	}
	return oldValue.NameTracker, nil
}

// ResetNameTracker resets all changes to the "name_tracker" field.
func (m *VisitorMutation) ResetNameTracker() {
	m.name_tracker = nil
}

// SetTenant sets the "tenant" field.
func (m *VisitorMutation) SetTenant(s string) {
	m.tenant = &s
}

// Tenant returns the value of the "tenant" field in the mutation.
func (m *VisitorMutation) Tenant() (r string, exists bool) {
	v := m.tenant
	if v == nil {
		return
	}
	return *v, true
}

// OldTenant returns the old "tenant" field's value of the Visitor entity.
// If the Visitor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VisitorMutation) OldTenant(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTenant is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTenant requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTenant: %w", err)
	}
	return oldValue.Tenant, nil
}

// ResetTenant resets all changes to the "tenant" field.
func (m *VisitorMutation) ResetTenant() {
	m.tenant = nil
}

// SetVisitorID sets the "visitor_id" field.
func (m *VisitorMutation) SetVisitorID(s string) {
	m.visitor_id = &s
}

// VisitorID returns the value of the "visitor_id" field in the mutation.
func (m *VisitorMutation) VisitorID() (r string, exists bool) {
	v := m.visitor_id
	if v == nil {
		return
	}
	return *v, true
}

// OldVisitorID returns the old "visitor_id" field's value of the Visitor entity.
// If the Visitor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VisitorMutation) OldVisitorID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVisitorID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVisitorID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVisitorID: %w", err)
	}
	return oldValue.VisitorID, nil
}

// ClearVisitorID clears the value of the "visitor_id" field.
func (m *VisitorMutation) ClearVisitorID() {
	m.visitor_id = nil
	m.clearedFields[visitor.FieldVisitorID] = struct{}{}
}

// VisitorIDCleared returns if the "visitor_id" field was cleared in this mutation.
func (m *VisitorMutation) VisitorIDCleared() bool {
	_, ok := m.clearedFields[visitor.FieldVisitorID]
	return ok
}

// ResetVisitorID resets all changes to the "visitor_id" field.
func (m *VisitorMutation) ResetVisitorID() {
	m.visitor_id = nil
	delete(m.clearedFields, visitor.FieldVisitorID)
}

// SetCustomerOsContactID sets the "customer_os_contact_id" field.
func (m *VisitorMutation) SetCustomerOsContactID(s string) {
	m.customer_os_contact_id = &s
}

// CustomerOsContactID returns the value of the "customer_os_contact_id" field in the mutation.
func (m *VisitorMutation) CustomerOsContactID() (r string, exists bool) {
	v := m.customer_os_contact_id
	if v == nil {
		return
	}
	return *v, true
}

// OldCustomerOsContactID returns the old "customer_os_contact_id" field's value of the Visitor entity.
// If the Visitor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VisitorMutation) OldCustomerOsContactID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCustomerOsContactID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCustomerOsContactID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCustomerOsContactID: %w", err)
	}
	return oldValue.CustomerOsContactID, nil
}

// ClearCustomerOsContactID clears the value of the "customer_os_contact_id" field.
func (m *VisitorMutation) ClearCustomerOsContactID() {
	m.customer_os_contact_id = nil
	m.clearedFields[visitor.FieldCustomerOsContactID] = struct{}{}
}

// CustomerOsContactIDCleared returns if the "customer_os_contact_id" field was cleared in this mutation.
func (m *VisitorMutation) CustomerOsContactIDCleared() bool {
	_, ok := m.clearedFields[visitor.FieldCustomerOsContactID]
	return ok
}

// ResetCustomerOsContactID resets all changes to the "customer_os_contact_id" field.
func (m *VisitorMutation) ResetCustomerOsContactID() {
	m.customer_os_contact_id = nil
	delete(m.clearedFields, visitor.FieldCustomerOsContactID)
}

// SetDomainUserid sets the "domain_userid" field.
func (m *VisitorMutation) SetDomainUserid(s string) {
	m.domain_userid = &s
}

// DomainUserid returns the value of the "domain_userid" field in the mutation.
func (m *VisitorMutation) DomainUserid() (r string, exists bool) {
	v := m.domain_userid
	if v == nil {
		return
	}
	return *v, true
}

// OldDomainUserid returns the old "domain_userid" field's value of the Visitor entity.
// If the Visitor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VisitorMutation) OldDomainUserid(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDomainUserid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDomainUserid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDomainUserid: %w", err)
	}
	return oldValue.DomainUserid, nil
}

// ResetDomainUserid resets all changes to the "domain_userid" field.
func (m *VisitorMutation) ResetDomainUserid() {
	m.domain_userid = nil
}

// SetNetworkUserid sets the "network_userid" field.
func (m *VisitorMutation) SetNetworkUserid(s string) {
	m.network_userid = &s
}

// NetworkUserid returns the value of the "network_userid" field in the mutation.
func (m *VisitorMutation) NetworkUserid() (r string, exists bool) {
	v := m.network_userid
	if v == nil {
		return
	}
	return *v, true
}

// OldNetworkUserid returns the old "network_userid" field's value of the Visitor entity.
// If the Visitor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VisitorMutation) OldNetworkUserid(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNetworkUserid is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNetworkUserid requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldNetworkUserid: %w", err)
	}
	return oldValue.NetworkUserid, nil
}

// ResetNetworkUserid resets all changes to the "network_userid" field.
func (m *VisitorMutation) ResetNetworkUserid() {
	m.network_userid = nil
}

// SetPageViews sets the "page_views" field.
func (m *VisitorMutation) SetPageViews(i int) {
	m.page_views = &i
	m.addpage_views = nil
}

// PageViews returns the value of the "page_views" field in the mutation.
func (m *VisitorMutation) PageViews() (r int, exists bool) {
	v := m.page_views
	if v == nil {
		return
	}
	return *v, true
}

// OldPageViews returns the old "page_views" field's value of the Visitor entity.
// If the Visitor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VisitorMutation) OldPageViews(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPageViews is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPageViews requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPageViews: %w", err)
	}
	return oldValue.PageViews, nil
}

// AddPageViews adds i to the "page_views" field.
func (m *VisitorMutation) AddPageViews(i int) {
	if m.addpage_views != nil {
		*m.addpage_views += i
	} else {
		m.addpage_views = &i
	}
}

// AddedPageViews returns the value that was added to the "page_views" field in this mutation.
func (m *VisitorMutation) AddedPageViews() (r int, exists bool) {
	v := m.addpage_views
	if v == nil {
		return
	}
	return *v, true
}

// ResetPageViews resets all changes to the "page_views" field.
func (m *VisitorMutation) ResetPageViews() {
	m.page_views = nil
	m.addpage_views = nil
}

// SetSessions sets the "sessions" field.
func (m *VisitorMutation) SetSessions(i int) {
	m.sessions = &i
	m.addsessions = nil
}

// Sessions returns the value of the "sessions" field in the mutation.
func (m *VisitorMutation) Sessions() (r int, exists bool) {
	v := m.sessions
	if v == nil {
		return
	}
	return *v, true
}

// OldSessions returns the old "sessions" field's value of the Visitor entity.
// If the Visitor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VisitorMutation) OldSessions(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSessions is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSessions requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSessions: %w", err)
	}
	return oldValue.Sessions, nil
}

// AddSessions adds i to the "sessions" field.
func (m *VisitorMutation) AddSessions(i int) {
	if m.addsessions != nil {
		*m.addsessions += i
	} else {
		m.addsessions = &i
	}
}

// AddedSessions returns the value that was added to the "sessions" field in this mutation.
func (m *VisitorMutation) AddedSessions() (r int, exists bool) {
	v := m.addsessions
	if v == nil {
		return
	}
	return *v, true
}

// ResetSessions resets all changes to the "sessions" field.
func (m *VisitorMutation) ResetSessions() {
	m.sessions = nil
	m.addsessions = nil
}

// SetEngagedTimeInS sets the "engaged_time_in_s" field.
func (m *VisitorMutation) SetEngagedTimeInS(i int) {
	m.engaged_time_in_s = &i
	m.addengaged_time_in_s = nil
}

// EngagedTimeInS returns the value of the "engaged_time_in_s" field in the mutation.
func (m *VisitorMutation) EngagedTimeInS() (r int, exists bool) {
	v := m.engaged_time_in_s
	if v == nil {
		return
	}
	return *v, true
}

// OldEngagedTimeInS returns the old "engaged_time_in_s" field's value of the Visitor entity.
// If the Visitor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VisitorMutation) OldEngagedTimeInS(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldEngagedTimeInS is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldEngagedTimeInS requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldEngagedTimeInS: %w", err)
	}
	return oldValue.EngagedTimeInS, nil
}

// AddEngagedTimeInS adds i to the "engaged_time_in_s" field.
func (m *VisitorMutation) AddEngagedTimeInS(i int) {
	if m.addengaged_time_in_s != nil {
		*m.addengaged_time_in_s += i
	} else {
		m.addengaged_time_in_s = &i
	}
}

// AddedEngagedTimeInS returns the value that was added to the "engaged_time_in_s" field in this mutation.
func (m *VisitorMutation) AddedEngagedTimeInS() (r int, exists bool) {
	v := m.addengaged_time_in_s
	if v == nil {
		return
	}
	return *v, true
}

// ResetEngagedTimeInS resets all changes to the "engaged_time_in_s" field.
func (m *VisitorMutation) ResetEngagedTimeInS() {
	m.engaged_time_in_s = nil
	m.addengaged_time_in_s = nil
}

// SetSyncedToCustomerOs sets the "synced_to_customer_os" field.
func (m *VisitorMutation) SetSyncedToCustomerOs(b bool) {
	m.synced_to_customer_os = &b
}

// SyncedToCustomerOs returns the value of the "synced_to_customer_os" field in the mutation.
func (m *VisitorMutation) SyncedToCustomerOs() (r bool, exists bool) {
	v := m.synced_to_customer_os
	if v == nil {
		return
	}
	return *v, true
}

// OldSyncedToCustomerOs returns the old "synced_to_customer_os" field's value of the Visitor entity.
// If the Visitor object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VisitorMutation) OldSyncedToCustomerOs(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldSyncedToCustomerOs is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldSyncedToCustomerOs requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldSyncedToCustomerOs: %w", err)
	}
	return oldValue.SyncedToCustomerOs, nil
}

// ResetSyncedToCustomerOs resets all changes to the "synced_to_customer_os" field.
func (m *VisitorMutation) ResetSyncedToCustomerOs() {
	m.synced_to_customer_os = nil
}

// Where appends a list predicates to the VisitorMutation builder.
func (m *VisitorMutation) Where(ps ...predicate.Visitor) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *VisitorMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Visitor).
func (m *VisitorMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *VisitorMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.app_id != nil {
		fields = append(fields, visitor.FieldAppID)
	}
	if m.name_tracker != nil {
		fields = append(fields, visitor.FieldNameTracker)
	}
	if m.tenant != nil {
		fields = append(fields, visitor.FieldTenant)
	}
	if m.visitor_id != nil {
		fields = append(fields, visitor.FieldVisitorID)
	}
	if m.customer_os_contact_id != nil {
		fields = append(fields, visitor.FieldCustomerOsContactID)
	}
	if m.domain_userid != nil {
		fields = append(fields, visitor.FieldDomainUserid)
	}
	if m.network_userid != nil {
		fields = append(fields, visitor.FieldNetworkUserid)
	}
	if m.page_views != nil {
		fields = append(fields, visitor.FieldPageViews)
	}
	if m.sessions != nil {
		fields = append(fields, visitor.FieldSessions)
	}
	if m.engaged_time_in_s != nil {
		fields = append(fields, visitor.FieldEngagedTimeInS)
	}
	if m.synced_to_customer_os != nil {
		fields = append(fields, visitor.FieldSyncedToCustomerOs)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *VisitorMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case visitor.FieldAppID:
		return m.AppID()
	case visitor.FieldNameTracker:
		return m.NameTracker()
	case visitor.FieldTenant:
		return m.Tenant()
	case visitor.FieldVisitorID:
		return m.VisitorID()
	case visitor.FieldCustomerOsContactID:
		return m.CustomerOsContactID()
	case visitor.FieldDomainUserid:
		return m.DomainUserid()
	case visitor.FieldNetworkUserid:
		return m.NetworkUserid()
	case visitor.FieldPageViews:
		return m.PageViews()
	case visitor.FieldSessions:
		return m.Sessions()
	case visitor.FieldEngagedTimeInS:
		return m.EngagedTimeInS()
	case visitor.FieldSyncedToCustomerOs:
		return m.SyncedToCustomerOs()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *VisitorMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case visitor.FieldAppID:
		return m.OldAppID(ctx)
	case visitor.FieldNameTracker:
		return m.OldNameTracker(ctx)
	case visitor.FieldTenant:
		return m.OldTenant(ctx)
	case visitor.FieldVisitorID:
		return m.OldVisitorID(ctx)
	case visitor.FieldCustomerOsContactID:
		return m.OldCustomerOsContactID(ctx)
	case visitor.FieldDomainUserid:
		return m.OldDomainUserid(ctx)
	case visitor.FieldNetworkUserid:
		return m.OldNetworkUserid(ctx)
	case visitor.FieldPageViews:
		return m.OldPageViews(ctx)
	case visitor.FieldSessions:
		return m.OldSessions(ctx)
	case visitor.FieldEngagedTimeInS:
		return m.OldEngagedTimeInS(ctx)
	case visitor.FieldSyncedToCustomerOs:
		return m.OldSyncedToCustomerOs(ctx)
	}
	return nil, fmt.Errorf("unknown Visitor field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VisitorMutation) SetField(name string, value ent.Value) error {
	switch name {
	case visitor.FieldAppID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case visitor.FieldNameTracker:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNameTracker(v)
		return nil
	case visitor.FieldTenant:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTenant(v)
		return nil
	case visitor.FieldVisitorID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVisitorID(v)
		return nil
	case visitor.FieldCustomerOsContactID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCustomerOsContactID(v)
		return nil
	case visitor.FieldDomainUserid:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDomainUserid(v)
		return nil
	case visitor.FieldNetworkUserid:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetNetworkUserid(v)
		return nil
	case visitor.FieldPageViews:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPageViews(v)
		return nil
	case visitor.FieldSessions:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSessions(v)
		return nil
	case visitor.FieldEngagedTimeInS:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetEngagedTimeInS(v)
		return nil
	case visitor.FieldSyncedToCustomerOs:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetSyncedToCustomerOs(v)
		return nil
	}
	return fmt.Errorf("unknown Visitor field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *VisitorMutation) AddedFields() []string {
	var fields []string
	if m.addpage_views != nil {
		fields = append(fields, visitor.FieldPageViews)
	}
	if m.addsessions != nil {
		fields = append(fields, visitor.FieldSessions)
	}
	if m.addengaged_time_in_s != nil {
		fields = append(fields, visitor.FieldEngagedTimeInS)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *VisitorMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case visitor.FieldPageViews:
		return m.AddedPageViews()
	case visitor.FieldSessions:
		return m.AddedSessions()
	case visitor.FieldEngagedTimeInS:
		return m.AddedEngagedTimeInS()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VisitorMutation) AddField(name string, value ent.Value) error {
	switch name {
	case visitor.FieldPageViews:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddPageViews(v)
		return nil
	case visitor.FieldSessions:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddSessions(v)
		return nil
	case visitor.FieldEngagedTimeInS:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddEngagedTimeInS(v)
		return nil
	}
	return fmt.Errorf("unknown Visitor numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *VisitorMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(visitor.FieldVisitorID) {
		fields = append(fields, visitor.FieldVisitorID)
	}
	if m.FieldCleared(visitor.FieldCustomerOsContactID) {
		fields = append(fields, visitor.FieldCustomerOsContactID)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *VisitorMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *VisitorMutation) ClearField(name string) error {
	switch name {
	case visitor.FieldVisitorID:
		m.ClearVisitorID()
		return nil
	case visitor.FieldCustomerOsContactID:
		m.ClearCustomerOsContactID()
		return nil
	}
	return fmt.Errorf("unknown Visitor nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *VisitorMutation) ResetField(name string) error {
	switch name {
	case visitor.FieldAppID:
		m.ResetAppID()
		return nil
	case visitor.FieldNameTracker:
		m.ResetNameTracker()
		return nil
	case visitor.FieldTenant:
		m.ResetTenant()
		return nil
	case visitor.FieldVisitorID:
		m.ResetVisitorID()
		return nil
	case visitor.FieldCustomerOsContactID:
		m.ResetCustomerOsContactID()
		return nil
	case visitor.FieldDomainUserid:
		m.ResetDomainUserid()
		return nil
	case visitor.FieldNetworkUserid:
		m.ResetNetworkUserid()
		return nil
	case visitor.FieldPageViews:
		m.ResetPageViews()
		return nil
	case visitor.FieldSessions:
		m.ResetSessions()
		return nil
	case visitor.FieldEngagedTimeInS:
		m.ResetEngagedTimeInS()
		return nil
	case visitor.FieldSyncedToCustomerOs:
		m.ResetSyncedToCustomerOs()
		return nil
	}
	return fmt.Errorf("unknown Visitor field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *VisitorMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *VisitorMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *VisitorMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *VisitorMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *VisitorMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *VisitorMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *VisitorMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown Visitor unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *VisitorMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown Visitor edge %s", name)
}
