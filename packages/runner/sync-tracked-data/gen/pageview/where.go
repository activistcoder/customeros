// Code generated by ent, DO NOT EDIT.

package pageview

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/openline-ai/openline-customer-os/packages/runner/sync-tracked-data/gen/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		v := make([]any, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// AppID applies equality check predicate on the "app_id" field. It's identical to AppIDEQ.
func AppID(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// NameTracker applies equality check predicate on the "name_tracker" field. It's identical to NameTrackerEQ.
func NameTracker(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNameTracker), v))
	})
}

// Tenant applies equality check predicate on the "tenant" field. It's identical to TenantEQ.
func Tenant(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenant), v))
	})
}

// PageViewID applies equality check predicate on the "page_view_id" field. It's identical to PageViewIDEQ.
func PageViewID(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPageViewID), v))
	})
}

// EventID applies equality check predicate on the "event_id" field. It's identical to EventIDEQ.
func EventID(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEventID), v))
	})
}

// SyncedToCustomerOs applies equality check predicate on the "synced_to_customer_os" field. It's identical to SyncedToCustomerOsEQ.
func SyncedToCustomerOs(v bool) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSyncedToCustomerOs), v))
	})
}

// StartTstamp applies equality check predicate on the "start_tstamp" field. It's identical to StartTstampEQ.
func StartTstamp(v time.Time) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartTstamp), v))
	})
}

// EndTstamp applies equality check predicate on the "end_tstamp" field. It's identical to EndTstampEQ.
func EndTstamp(v time.Time) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndTstamp), v))
	})
}

// VisitorID applies equality check predicate on the "visitor_id" field. It's identical to VisitorIDEQ.
func VisitorID(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVisitorID), v))
	})
}

// CustomerOsContactID applies equality check predicate on the "customer_os_contact_id" field. It's identical to CustomerOsContactIDEQ.
func CustomerOsContactID(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustomerOsContactID), v))
	})
}

// DomainUserid applies equality check predicate on the "domain_userid" field. It's identical to DomainUseridEQ.
func DomainUserid(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDomainUserid), v))
	})
}

// NetworkUserid applies equality check predicate on the "network_userid" field. It's identical to NetworkUseridEQ.
func NetworkUserid(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNetworkUserid), v))
	})
}

// DomainSessionid applies equality check predicate on the "domain_sessionid" field. It's identical to DomainSessionidEQ.
func DomainSessionid(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDomainSessionid), v))
	})
}

// DomainSessionidx applies equality check predicate on the "domain_sessionidx" field. It's identical to DomainSessionidxEQ.
func DomainSessionidx(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDomainSessionidx), v))
	})
}

// PageViewsInSession applies equality check predicate on the "page_views_in_session" field. It's identical to PageViewsInSessionEQ.
func PageViewsInSession(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPageViewsInSession), v))
	})
}

// PageViewInSessionIndex applies equality check predicate on the "page_view_in_session_index" field. It's identical to PageViewInSessionIndexEQ.
func PageViewInSessionIndex(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPageViewInSessionIndex), v))
	})
}

// EngagedTimeInS applies equality check predicate on the "engaged_time_in_s" field. It's identical to EngagedTimeInSEQ.
func EngagedTimeInS(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEngagedTimeInS), v))
	})
}

// PageURL applies equality check predicate on the "page_url" field. It's identical to PageURLEQ.
func PageURL(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPageURL), v))
	})
}

// PageTitle applies equality check predicate on the "page_title" field. It's identical to PageTitleEQ.
func PageTitle(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPageTitle), v))
	})
}

// AppIDEQ applies the EQ predicate on the "app_id" field.
func AppIDEQ(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// AppIDNEQ applies the NEQ predicate on the "app_id" field.
func AppIDNEQ(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAppID), v))
	})
}

// AppIDIn applies the In predicate on the "app_id" field.
func AppIDIn(vs ...string) predicate.PageView {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldAppID), v...))
	})
}

// AppIDNotIn applies the NotIn predicate on the "app_id" field.
func AppIDNotIn(vs ...string) predicate.PageView {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldAppID), v...))
	})
}

// AppIDGT applies the GT predicate on the "app_id" field.
func AppIDGT(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAppID), v))
	})
}

// AppIDGTE applies the GTE predicate on the "app_id" field.
func AppIDGTE(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAppID), v))
	})
}

// AppIDLT applies the LT predicate on the "app_id" field.
func AppIDLT(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAppID), v))
	})
}

// AppIDLTE applies the LTE predicate on the "app_id" field.
func AppIDLTE(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAppID), v))
	})
}

// AppIDContains applies the Contains predicate on the "app_id" field.
func AppIDContains(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAppID), v))
	})
}

// AppIDHasPrefix applies the HasPrefix predicate on the "app_id" field.
func AppIDHasPrefix(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAppID), v))
	})
}

// AppIDHasSuffix applies the HasSuffix predicate on the "app_id" field.
func AppIDHasSuffix(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAppID), v))
	})
}

// AppIDEqualFold applies the EqualFold predicate on the "app_id" field.
func AppIDEqualFold(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAppID), v))
	})
}

// AppIDContainsFold applies the ContainsFold predicate on the "app_id" field.
func AppIDContainsFold(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAppID), v))
	})
}

// NameTrackerEQ applies the EQ predicate on the "name_tracker" field.
func NameTrackerEQ(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNameTracker), v))
	})
}

// NameTrackerNEQ applies the NEQ predicate on the "name_tracker" field.
func NameTrackerNEQ(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNameTracker), v))
	})
}

// NameTrackerIn applies the In predicate on the "name_tracker" field.
func NameTrackerIn(vs ...string) predicate.PageView {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldNameTracker), v...))
	})
}

// NameTrackerNotIn applies the NotIn predicate on the "name_tracker" field.
func NameTrackerNotIn(vs ...string) predicate.PageView {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldNameTracker), v...))
	})
}

// NameTrackerGT applies the GT predicate on the "name_tracker" field.
func NameTrackerGT(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNameTracker), v))
	})
}

// NameTrackerGTE applies the GTE predicate on the "name_tracker" field.
func NameTrackerGTE(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNameTracker), v))
	})
}

// NameTrackerLT applies the LT predicate on the "name_tracker" field.
func NameTrackerLT(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNameTracker), v))
	})
}

// NameTrackerLTE applies the LTE predicate on the "name_tracker" field.
func NameTrackerLTE(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNameTracker), v))
	})
}

// NameTrackerContains applies the Contains predicate on the "name_tracker" field.
func NameTrackerContains(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNameTracker), v))
	})
}

// NameTrackerHasPrefix applies the HasPrefix predicate on the "name_tracker" field.
func NameTrackerHasPrefix(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNameTracker), v))
	})
}

// NameTrackerHasSuffix applies the HasSuffix predicate on the "name_tracker" field.
func NameTrackerHasSuffix(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNameTracker), v))
	})
}

// NameTrackerEqualFold applies the EqualFold predicate on the "name_tracker" field.
func NameTrackerEqualFold(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNameTracker), v))
	})
}

// NameTrackerContainsFold applies the ContainsFold predicate on the "name_tracker" field.
func NameTrackerContainsFold(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNameTracker), v))
	})
}

// TenantEQ applies the EQ predicate on the "tenant" field.
func TenantEQ(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTenant), v))
	})
}

// TenantNEQ applies the NEQ predicate on the "tenant" field.
func TenantNEQ(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTenant), v))
	})
}

// TenantIn applies the In predicate on the "tenant" field.
func TenantIn(vs ...string) predicate.PageView {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTenant), v...))
	})
}

// TenantNotIn applies the NotIn predicate on the "tenant" field.
func TenantNotIn(vs ...string) predicate.PageView {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTenant), v...))
	})
}

// TenantGT applies the GT predicate on the "tenant" field.
func TenantGT(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTenant), v))
	})
}

// TenantGTE applies the GTE predicate on the "tenant" field.
func TenantGTE(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTenant), v))
	})
}

// TenantLT applies the LT predicate on the "tenant" field.
func TenantLT(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTenant), v))
	})
}

// TenantLTE applies the LTE predicate on the "tenant" field.
func TenantLTE(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTenant), v))
	})
}

// TenantContains applies the Contains predicate on the "tenant" field.
func TenantContains(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTenant), v))
	})
}

// TenantHasPrefix applies the HasPrefix predicate on the "tenant" field.
func TenantHasPrefix(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTenant), v))
	})
}

// TenantHasSuffix applies the HasSuffix predicate on the "tenant" field.
func TenantHasSuffix(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTenant), v))
	})
}

// TenantEqualFold applies the EqualFold predicate on the "tenant" field.
func TenantEqualFold(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTenant), v))
	})
}

// TenantContainsFold applies the ContainsFold predicate on the "tenant" field.
func TenantContainsFold(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTenant), v))
	})
}

// PageViewIDEQ applies the EQ predicate on the "page_view_id" field.
func PageViewIDEQ(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPageViewID), v))
	})
}

// PageViewIDNEQ applies the NEQ predicate on the "page_view_id" field.
func PageViewIDNEQ(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPageViewID), v))
	})
}

// PageViewIDIn applies the In predicate on the "page_view_id" field.
func PageViewIDIn(vs ...string) predicate.PageView {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPageViewID), v...))
	})
}

// PageViewIDNotIn applies the NotIn predicate on the "page_view_id" field.
func PageViewIDNotIn(vs ...string) predicate.PageView {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPageViewID), v...))
	})
}

// PageViewIDGT applies the GT predicate on the "page_view_id" field.
func PageViewIDGT(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPageViewID), v))
	})
}

// PageViewIDGTE applies the GTE predicate on the "page_view_id" field.
func PageViewIDGTE(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPageViewID), v))
	})
}

// PageViewIDLT applies the LT predicate on the "page_view_id" field.
func PageViewIDLT(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPageViewID), v))
	})
}

// PageViewIDLTE applies the LTE predicate on the "page_view_id" field.
func PageViewIDLTE(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPageViewID), v))
	})
}

// PageViewIDContains applies the Contains predicate on the "page_view_id" field.
func PageViewIDContains(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPageViewID), v))
	})
}

// PageViewIDHasPrefix applies the HasPrefix predicate on the "page_view_id" field.
func PageViewIDHasPrefix(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPageViewID), v))
	})
}

// PageViewIDHasSuffix applies the HasSuffix predicate on the "page_view_id" field.
func PageViewIDHasSuffix(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPageViewID), v))
	})
}

// PageViewIDEqualFold applies the EqualFold predicate on the "page_view_id" field.
func PageViewIDEqualFold(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPageViewID), v))
	})
}

// PageViewIDContainsFold applies the ContainsFold predicate on the "page_view_id" field.
func PageViewIDContainsFold(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPageViewID), v))
	})
}

// EventIDEQ applies the EQ predicate on the "event_id" field.
func EventIDEQ(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEventID), v))
	})
}

// EventIDNEQ applies the NEQ predicate on the "event_id" field.
func EventIDNEQ(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEventID), v))
	})
}

// EventIDIn applies the In predicate on the "event_id" field.
func EventIDIn(vs ...string) predicate.PageView {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEventID), v...))
	})
}

// EventIDNotIn applies the NotIn predicate on the "event_id" field.
func EventIDNotIn(vs ...string) predicate.PageView {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEventID), v...))
	})
}

// EventIDGT applies the GT predicate on the "event_id" field.
func EventIDGT(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEventID), v))
	})
}

// EventIDGTE applies the GTE predicate on the "event_id" field.
func EventIDGTE(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEventID), v))
	})
}

// EventIDLT applies the LT predicate on the "event_id" field.
func EventIDLT(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEventID), v))
	})
}

// EventIDLTE applies the LTE predicate on the "event_id" field.
func EventIDLTE(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEventID), v))
	})
}

// EventIDContains applies the Contains predicate on the "event_id" field.
func EventIDContains(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldEventID), v))
	})
}

// EventIDHasPrefix applies the HasPrefix predicate on the "event_id" field.
func EventIDHasPrefix(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldEventID), v))
	})
}

// EventIDHasSuffix applies the HasSuffix predicate on the "event_id" field.
func EventIDHasSuffix(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldEventID), v))
	})
}

// EventIDEqualFold applies the EqualFold predicate on the "event_id" field.
func EventIDEqualFold(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldEventID), v))
	})
}

// EventIDContainsFold applies the ContainsFold predicate on the "event_id" field.
func EventIDContainsFold(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldEventID), v))
	})
}

// SyncedToCustomerOsEQ applies the EQ predicate on the "synced_to_customer_os" field.
func SyncedToCustomerOsEQ(v bool) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSyncedToCustomerOs), v))
	})
}

// SyncedToCustomerOsNEQ applies the NEQ predicate on the "synced_to_customer_os" field.
func SyncedToCustomerOsNEQ(v bool) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSyncedToCustomerOs), v))
	})
}

// StartTstampEQ applies the EQ predicate on the "start_tstamp" field.
func StartTstampEQ(v time.Time) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartTstamp), v))
	})
}

// StartTstampNEQ applies the NEQ predicate on the "start_tstamp" field.
func StartTstampNEQ(v time.Time) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStartTstamp), v))
	})
}

// StartTstampIn applies the In predicate on the "start_tstamp" field.
func StartTstampIn(vs ...time.Time) predicate.PageView {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStartTstamp), v...))
	})
}

// StartTstampNotIn applies the NotIn predicate on the "start_tstamp" field.
func StartTstampNotIn(vs ...time.Time) predicate.PageView {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStartTstamp), v...))
	})
}

// StartTstampGT applies the GT predicate on the "start_tstamp" field.
func StartTstampGT(v time.Time) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStartTstamp), v))
	})
}

// StartTstampGTE applies the GTE predicate on the "start_tstamp" field.
func StartTstampGTE(v time.Time) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStartTstamp), v))
	})
}

// StartTstampLT applies the LT predicate on the "start_tstamp" field.
func StartTstampLT(v time.Time) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStartTstamp), v))
	})
}

// StartTstampLTE applies the LTE predicate on the "start_tstamp" field.
func StartTstampLTE(v time.Time) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStartTstamp), v))
	})
}

// EndTstampEQ applies the EQ predicate on the "end_tstamp" field.
func EndTstampEQ(v time.Time) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndTstamp), v))
	})
}

// EndTstampNEQ applies the NEQ predicate on the "end_tstamp" field.
func EndTstampNEQ(v time.Time) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEndTstamp), v))
	})
}

// EndTstampIn applies the In predicate on the "end_tstamp" field.
func EndTstampIn(vs ...time.Time) predicate.PageView {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEndTstamp), v...))
	})
}

// EndTstampNotIn applies the NotIn predicate on the "end_tstamp" field.
func EndTstampNotIn(vs ...time.Time) predicate.PageView {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEndTstamp), v...))
	})
}

// EndTstampGT applies the GT predicate on the "end_tstamp" field.
func EndTstampGT(v time.Time) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEndTstamp), v))
	})
}

// EndTstampGTE applies the GTE predicate on the "end_tstamp" field.
func EndTstampGTE(v time.Time) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEndTstamp), v))
	})
}

// EndTstampLT applies the LT predicate on the "end_tstamp" field.
func EndTstampLT(v time.Time) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEndTstamp), v))
	})
}

// EndTstampLTE applies the LTE predicate on the "end_tstamp" field.
func EndTstampLTE(v time.Time) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEndTstamp), v))
	})
}

// VisitorIDEQ applies the EQ predicate on the "visitor_id" field.
func VisitorIDEQ(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVisitorID), v))
	})
}

// VisitorIDNEQ applies the NEQ predicate on the "visitor_id" field.
func VisitorIDNEQ(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVisitorID), v))
	})
}

// VisitorIDIn applies the In predicate on the "visitor_id" field.
func VisitorIDIn(vs ...string) predicate.PageView {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldVisitorID), v...))
	})
}

// VisitorIDNotIn applies the NotIn predicate on the "visitor_id" field.
func VisitorIDNotIn(vs ...string) predicate.PageView {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldVisitorID), v...))
	})
}

// VisitorIDGT applies the GT predicate on the "visitor_id" field.
func VisitorIDGT(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVisitorID), v))
	})
}

// VisitorIDGTE applies the GTE predicate on the "visitor_id" field.
func VisitorIDGTE(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVisitorID), v))
	})
}

// VisitorIDLT applies the LT predicate on the "visitor_id" field.
func VisitorIDLT(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVisitorID), v))
	})
}

// VisitorIDLTE applies the LTE predicate on the "visitor_id" field.
func VisitorIDLTE(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVisitorID), v))
	})
}

// VisitorIDContains applies the Contains predicate on the "visitor_id" field.
func VisitorIDContains(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldVisitorID), v))
	})
}

// VisitorIDHasPrefix applies the HasPrefix predicate on the "visitor_id" field.
func VisitorIDHasPrefix(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldVisitorID), v))
	})
}

// VisitorIDHasSuffix applies the HasSuffix predicate on the "visitor_id" field.
func VisitorIDHasSuffix(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldVisitorID), v))
	})
}

// VisitorIDIsNil applies the IsNil predicate on the "visitor_id" field.
func VisitorIDIsNil() predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldVisitorID)))
	})
}

// VisitorIDNotNil applies the NotNil predicate on the "visitor_id" field.
func VisitorIDNotNil() predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldVisitorID)))
	})
}

// VisitorIDEqualFold applies the EqualFold predicate on the "visitor_id" field.
func VisitorIDEqualFold(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldVisitorID), v))
	})
}

// VisitorIDContainsFold applies the ContainsFold predicate on the "visitor_id" field.
func VisitorIDContainsFold(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldVisitorID), v))
	})
}

// CustomerOsContactIDEQ applies the EQ predicate on the "customer_os_contact_id" field.
func CustomerOsContactIDEQ(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCustomerOsContactID), v))
	})
}

// CustomerOsContactIDNEQ applies the NEQ predicate on the "customer_os_contact_id" field.
func CustomerOsContactIDNEQ(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCustomerOsContactID), v))
	})
}

// CustomerOsContactIDIn applies the In predicate on the "customer_os_contact_id" field.
func CustomerOsContactIDIn(vs ...string) predicate.PageView {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCustomerOsContactID), v...))
	})
}

// CustomerOsContactIDNotIn applies the NotIn predicate on the "customer_os_contact_id" field.
func CustomerOsContactIDNotIn(vs ...string) predicate.PageView {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCustomerOsContactID), v...))
	})
}

// CustomerOsContactIDGT applies the GT predicate on the "customer_os_contact_id" field.
func CustomerOsContactIDGT(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCustomerOsContactID), v))
	})
}

// CustomerOsContactIDGTE applies the GTE predicate on the "customer_os_contact_id" field.
func CustomerOsContactIDGTE(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCustomerOsContactID), v))
	})
}

// CustomerOsContactIDLT applies the LT predicate on the "customer_os_contact_id" field.
func CustomerOsContactIDLT(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCustomerOsContactID), v))
	})
}

// CustomerOsContactIDLTE applies the LTE predicate on the "customer_os_contact_id" field.
func CustomerOsContactIDLTE(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCustomerOsContactID), v))
	})
}

// CustomerOsContactIDContains applies the Contains predicate on the "customer_os_contact_id" field.
func CustomerOsContactIDContains(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCustomerOsContactID), v))
	})
}

// CustomerOsContactIDHasPrefix applies the HasPrefix predicate on the "customer_os_contact_id" field.
func CustomerOsContactIDHasPrefix(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCustomerOsContactID), v))
	})
}

// CustomerOsContactIDHasSuffix applies the HasSuffix predicate on the "customer_os_contact_id" field.
func CustomerOsContactIDHasSuffix(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCustomerOsContactID), v))
	})
}

// CustomerOsContactIDIsNil applies the IsNil predicate on the "customer_os_contact_id" field.
func CustomerOsContactIDIsNil() predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCustomerOsContactID)))
	})
}

// CustomerOsContactIDNotNil applies the NotNil predicate on the "customer_os_contact_id" field.
func CustomerOsContactIDNotNil() predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCustomerOsContactID)))
	})
}

// CustomerOsContactIDEqualFold applies the EqualFold predicate on the "customer_os_contact_id" field.
func CustomerOsContactIDEqualFold(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCustomerOsContactID), v))
	})
}

// CustomerOsContactIDContainsFold applies the ContainsFold predicate on the "customer_os_contact_id" field.
func CustomerOsContactIDContainsFold(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCustomerOsContactID), v))
	})
}

// DomainUseridEQ applies the EQ predicate on the "domain_userid" field.
func DomainUseridEQ(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDomainUserid), v))
	})
}

// DomainUseridNEQ applies the NEQ predicate on the "domain_userid" field.
func DomainUseridNEQ(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDomainUserid), v))
	})
}

// DomainUseridIn applies the In predicate on the "domain_userid" field.
func DomainUseridIn(vs ...string) predicate.PageView {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDomainUserid), v...))
	})
}

// DomainUseridNotIn applies the NotIn predicate on the "domain_userid" field.
func DomainUseridNotIn(vs ...string) predicate.PageView {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDomainUserid), v...))
	})
}

// DomainUseridGT applies the GT predicate on the "domain_userid" field.
func DomainUseridGT(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDomainUserid), v))
	})
}

// DomainUseridGTE applies the GTE predicate on the "domain_userid" field.
func DomainUseridGTE(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDomainUserid), v))
	})
}

// DomainUseridLT applies the LT predicate on the "domain_userid" field.
func DomainUseridLT(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDomainUserid), v))
	})
}

// DomainUseridLTE applies the LTE predicate on the "domain_userid" field.
func DomainUseridLTE(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDomainUserid), v))
	})
}

// DomainUseridContains applies the Contains predicate on the "domain_userid" field.
func DomainUseridContains(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldDomainUserid), v))
	})
}

// DomainUseridHasPrefix applies the HasPrefix predicate on the "domain_userid" field.
func DomainUseridHasPrefix(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldDomainUserid), v))
	})
}

// DomainUseridHasSuffix applies the HasSuffix predicate on the "domain_userid" field.
func DomainUseridHasSuffix(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldDomainUserid), v))
	})
}

// DomainUseridEqualFold applies the EqualFold predicate on the "domain_userid" field.
func DomainUseridEqualFold(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldDomainUserid), v))
	})
}

// DomainUseridContainsFold applies the ContainsFold predicate on the "domain_userid" field.
func DomainUseridContainsFold(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldDomainUserid), v))
	})
}

// NetworkUseridEQ applies the EQ predicate on the "network_userid" field.
func NetworkUseridEQ(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNetworkUserid), v))
	})
}

// NetworkUseridNEQ applies the NEQ predicate on the "network_userid" field.
func NetworkUseridNEQ(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNetworkUserid), v))
	})
}

// NetworkUseridIn applies the In predicate on the "network_userid" field.
func NetworkUseridIn(vs ...string) predicate.PageView {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldNetworkUserid), v...))
	})
}

// NetworkUseridNotIn applies the NotIn predicate on the "network_userid" field.
func NetworkUseridNotIn(vs ...string) predicate.PageView {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldNetworkUserid), v...))
	})
}

// NetworkUseridGT applies the GT predicate on the "network_userid" field.
func NetworkUseridGT(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNetworkUserid), v))
	})
}

// NetworkUseridGTE applies the GTE predicate on the "network_userid" field.
func NetworkUseridGTE(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNetworkUserid), v))
	})
}

// NetworkUseridLT applies the LT predicate on the "network_userid" field.
func NetworkUseridLT(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNetworkUserid), v))
	})
}

// NetworkUseridLTE applies the LTE predicate on the "network_userid" field.
func NetworkUseridLTE(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNetworkUserid), v))
	})
}

// NetworkUseridContains applies the Contains predicate on the "network_userid" field.
func NetworkUseridContains(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNetworkUserid), v))
	})
}

// NetworkUseridHasPrefix applies the HasPrefix predicate on the "network_userid" field.
func NetworkUseridHasPrefix(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNetworkUserid), v))
	})
}

// NetworkUseridHasSuffix applies the HasSuffix predicate on the "network_userid" field.
func NetworkUseridHasSuffix(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNetworkUserid), v))
	})
}

// NetworkUseridEqualFold applies the EqualFold predicate on the "network_userid" field.
func NetworkUseridEqualFold(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNetworkUserid), v))
	})
}

// NetworkUseridContainsFold applies the ContainsFold predicate on the "network_userid" field.
func NetworkUseridContainsFold(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNetworkUserid), v))
	})
}

// DomainSessionidEQ applies the EQ predicate on the "domain_sessionid" field.
func DomainSessionidEQ(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDomainSessionid), v))
	})
}

// DomainSessionidNEQ applies the NEQ predicate on the "domain_sessionid" field.
func DomainSessionidNEQ(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDomainSessionid), v))
	})
}

// DomainSessionidIn applies the In predicate on the "domain_sessionid" field.
func DomainSessionidIn(vs ...int) predicate.PageView {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDomainSessionid), v...))
	})
}

// DomainSessionidNotIn applies the NotIn predicate on the "domain_sessionid" field.
func DomainSessionidNotIn(vs ...int) predicate.PageView {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDomainSessionid), v...))
	})
}

// DomainSessionidGT applies the GT predicate on the "domain_sessionid" field.
func DomainSessionidGT(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDomainSessionid), v))
	})
}

// DomainSessionidGTE applies the GTE predicate on the "domain_sessionid" field.
func DomainSessionidGTE(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDomainSessionid), v))
	})
}

// DomainSessionidLT applies the LT predicate on the "domain_sessionid" field.
func DomainSessionidLT(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDomainSessionid), v))
	})
}

// DomainSessionidLTE applies the LTE predicate on the "domain_sessionid" field.
func DomainSessionidLTE(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDomainSessionid), v))
	})
}

// DomainSessionidxEQ applies the EQ predicate on the "domain_sessionidx" field.
func DomainSessionidxEQ(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDomainSessionidx), v))
	})
}

// DomainSessionidxNEQ applies the NEQ predicate on the "domain_sessionidx" field.
func DomainSessionidxNEQ(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDomainSessionidx), v))
	})
}

// DomainSessionidxIn applies the In predicate on the "domain_sessionidx" field.
func DomainSessionidxIn(vs ...int) predicate.PageView {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDomainSessionidx), v...))
	})
}

// DomainSessionidxNotIn applies the NotIn predicate on the "domain_sessionidx" field.
func DomainSessionidxNotIn(vs ...int) predicate.PageView {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDomainSessionidx), v...))
	})
}

// DomainSessionidxGT applies the GT predicate on the "domain_sessionidx" field.
func DomainSessionidxGT(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDomainSessionidx), v))
	})
}

// DomainSessionidxGTE applies the GTE predicate on the "domain_sessionidx" field.
func DomainSessionidxGTE(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDomainSessionidx), v))
	})
}

// DomainSessionidxLT applies the LT predicate on the "domain_sessionidx" field.
func DomainSessionidxLT(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDomainSessionidx), v))
	})
}

// DomainSessionidxLTE applies the LTE predicate on the "domain_sessionidx" field.
func DomainSessionidxLTE(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDomainSessionidx), v))
	})
}

// PageViewsInSessionEQ applies the EQ predicate on the "page_views_in_session" field.
func PageViewsInSessionEQ(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPageViewsInSession), v))
	})
}

// PageViewsInSessionNEQ applies the NEQ predicate on the "page_views_in_session" field.
func PageViewsInSessionNEQ(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPageViewsInSession), v))
	})
}

// PageViewsInSessionIn applies the In predicate on the "page_views_in_session" field.
func PageViewsInSessionIn(vs ...int) predicate.PageView {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPageViewsInSession), v...))
	})
}

// PageViewsInSessionNotIn applies the NotIn predicate on the "page_views_in_session" field.
func PageViewsInSessionNotIn(vs ...int) predicate.PageView {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPageViewsInSession), v...))
	})
}

// PageViewsInSessionGT applies the GT predicate on the "page_views_in_session" field.
func PageViewsInSessionGT(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPageViewsInSession), v))
	})
}

// PageViewsInSessionGTE applies the GTE predicate on the "page_views_in_session" field.
func PageViewsInSessionGTE(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPageViewsInSession), v))
	})
}

// PageViewsInSessionLT applies the LT predicate on the "page_views_in_session" field.
func PageViewsInSessionLT(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPageViewsInSession), v))
	})
}

// PageViewsInSessionLTE applies the LTE predicate on the "page_views_in_session" field.
func PageViewsInSessionLTE(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPageViewsInSession), v))
	})
}

// PageViewInSessionIndexEQ applies the EQ predicate on the "page_view_in_session_index" field.
func PageViewInSessionIndexEQ(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPageViewInSessionIndex), v))
	})
}

// PageViewInSessionIndexNEQ applies the NEQ predicate on the "page_view_in_session_index" field.
func PageViewInSessionIndexNEQ(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPageViewInSessionIndex), v))
	})
}

// PageViewInSessionIndexIn applies the In predicate on the "page_view_in_session_index" field.
func PageViewInSessionIndexIn(vs ...int) predicate.PageView {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPageViewInSessionIndex), v...))
	})
}

// PageViewInSessionIndexNotIn applies the NotIn predicate on the "page_view_in_session_index" field.
func PageViewInSessionIndexNotIn(vs ...int) predicate.PageView {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPageViewInSessionIndex), v...))
	})
}

// PageViewInSessionIndexGT applies the GT predicate on the "page_view_in_session_index" field.
func PageViewInSessionIndexGT(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPageViewInSessionIndex), v))
	})
}

// PageViewInSessionIndexGTE applies the GTE predicate on the "page_view_in_session_index" field.
func PageViewInSessionIndexGTE(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPageViewInSessionIndex), v))
	})
}

// PageViewInSessionIndexLT applies the LT predicate on the "page_view_in_session_index" field.
func PageViewInSessionIndexLT(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPageViewInSessionIndex), v))
	})
}

// PageViewInSessionIndexLTE applies the LTE predicate on the "page_view_in_session_index" field.
func PageViewInSessionIndexLTE(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPageViewInSessionIndex), v))
	})
}

// EngagedTimeInSEQ applies the EQ predicate on the "engaged_time_in_s" field.
func EngagedTimeInSEQ(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEngagedTimeInS), v))
	})
}

// EngagedTimeInSNEQ applies the NEQ predicate on the "engaged_time_in_s" field.
func EngagedTimeInSNEQ(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEngagedTimeInS), v))
	})
}

// EngagedTimeInSIn applies the In predicate on the "engaged_time_in_s" field.
func EngagedTimeInSIn(vs ...int) predicate.PageView {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEngagedTimeInS), v...))
	})
}

// EngagedTimeInSNotIn applies the NotIn predicate on the "engaged_time_in_s" field.
func EngagedTimeInSNotIn(vs ...int) predicate.PageView {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEngagedTimeInS), v...))
	})
}

// EngagedTimeInSGT applies the GT predicate on the "engaged_time_in_s" field.
func EngagedTimeInSGT(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEngagedTimeInS), v))
	})
}

// EngagedTimeInSGTE applies the GTE predicate on the "engaged_time_in_s" field.
func EngagedTimeInSGTE(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEngagedTimeInS), v))
	})
}

// EngagedTimeInSLT applies the LT predicate on the "engaged_time_in_s" field.
func EngagedTimeInSLT(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEngagedTimeInS), v))
	})
}

// EngagedTimeInSLTE applies the LTE predicate on the "engaged_time_in_s" field.
func EngagedTimeInSLTE(v int) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEngagedTimeInS), v))
	})
}

// PageURLEQ applies the EQ predicate on the "page_url" field.
func PageURLEQ(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPageURL), v))
	})
}

// PageURLNEQ applies the NEQ predicate on the "page_url" field.
func PageURLNEQ(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPageURL), v))
	})
}

// PageURLIn applies the In predicate on the "page_url" field.
func PageURLIn(vs ...string) predicate.PageView {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPageURL), v...))
	})
}

// PageURLNotIn applies the NotIn predicate on the "page_url" field.
func PageURLNotIn(vs ...string) predicate.PageView {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPageURL), v...))
	})
}

// PageURLGT applies the GT predicate on the "page_url" field.
func PageURLGT(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPageURL), v))
	})
}

// PageURLGTE applies the GTE predicate on the "page_url" field.
func PageURLGTE(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPageURL), v))
	})
}

// PageURLLT applies the LT predicate on the "page_url" field.
func PageURLLT(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPageURL), v))
	})
}

// PageURLLTE applies the LTE predicate on the "page_url" field.
func PageURLLTE(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPageURL), v))
	})
}

// PageURLContains applies the Contains predicate on the "page_url" field.
func PageURLContains(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPageURL), v))
	})
}

// PageURLHasPrefix applies the HasPrefix predicate on the "page_url" field.
func PageURLHasPrefix(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPageURL), v))
	})
}

// PageURLHasSuffix applies the HasSuffix predicate on the "page_url" field.
func PageURLHasSuffix(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPageURL), v))
	})
}

// PageURLEqualFold applies the EqualFold predicate on the "page_url" field.
func PageURLEqualFold(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPageURL), v))
	})
}

// PageURLContainsFold applies the ContainsFold predicate on the "page_url" field.
func PageURLContainsFold(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPageURL), v))
	})
}

// PageTitleEQ applies the EQ predicate on the "page_title" field.
func PageTitleEQ(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPageTitle), v))
	})
}

// PageTitleNEQ applies the NEQ predicate on the "page_title" field.
func PageTitleNEQ(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPageTitle), v))
	})
}

// PageTitleIn applies the In predicate on the "page_title" field.
func PageTitleIn(vs ...string) predicate.PageView {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldPageTitle), v...))
	})
}

// PageTitleNotIn applies the NotIn predicate on the "page_title" field.
func PageTitleNotIn(vs ...string) predicate.PageView {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldPageTitle), v...))
	})
}

// PageTitleGT applies the GT predicate on the "page_title" field.
func PageTitleGT(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPageTitle), v))
	})
}

// PageTitleGTE applies the GTE predicate on the "page_title" field.
func PageTitleGTE(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPageTitle), v))
	})
}

// PageTitleLT applies the LT predicate on the "page_title" field.
func PageTitleLT(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPageTitle), v))
	})
}

// PageTitleLTE applies the LTE predicate on the "page_title" field.
func PageTitleLTE(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPageTitle), v))
	})
}

// PageTitleContains applies the Contains predicate on the "page_title" field.
func PageTitleContains(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPageTitle), v))
	})
}

// PageTitleHasPrefix applies the HasPrefix predicate on the "page_title" field.
func PageTitleHasPrefix(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPageTitle), v))
	})
}

// PageTitleHasSuffix applies the HasSuffix predicate on the "page_title" field.
func PageTitleHasSuffix(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPageTitle), v))
	})
}

// PageTitleEqualFold applies the EqualFold predicate on the "page_title" field.
func PageTitleEqualFold(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPageTitle), v))
	})
}

// PageTitleContainsFold applies the ContainsFold predicate on the "page_title" field.
func PageTitleContainsFold(v string) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPageTitle), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PageView) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PageView) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PageView) predicate.PageView {
	return predicate.PageView(func(s *sql.Selector) {
		p(s.Not())
	})
}
