// Code generated by ent, DO NOT EDIT.

package gen

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/openline-ai/openline-customer-os/packages/runner/sync-tracked-data/gen/pageview"
)

// PageView is the model entity for the PageView schema.
type PageView struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// AppID holds the value of the "app_id" field.
	AppID string `json:"app_id,omitempty"`
	// NameTracker holds the value of the "name_tracker" field.
	NameTracker string `json:"name_tracker,omitempty"`
	// Tenant holds the value of the "tenant" field.
	Tenant string `json:"tenant,omitempty"`
	// PageViewID holds the value of the "page_view_id" field.
	PageViewID string `json:"page_view_id,omitempty"`
	// EventID holds the value of the "event_id" field.
	EventID string `json:"event_id,omitempty"`
	// SyncedToCustomerOs holds the value of the "synced_to_customer_os" field.
	SyncedToCustomerOs bool `json:"synced_to_customer_os,omitempty"`
	// StartTstamp holds the value of the "start_tstamp" field.
	StartTstamp time.Time `json:"start_tstamp,omitempty"`
	// EndTstamp holds the value of the "end_tstamp" field.
	EndTstamp time.Time `json:"end_tstamp,omitempty"`
	// VisitorID holds the value of the "visitor_id" field.
	VisitorID string `json:"visitor_id,omitempty"`
	// CustomerOsContactID holds the value of the "customer_os_contact_id" field.
	CustomerOsContactID string `json:"customer_os_contact_id,omitempty"`
	// DomainUserid holds the value of the "domain_userid" field.
	DomainUserid string `json:"domain_userid,omitempty"`
	// NetworkUserid holds the value of the "network_userid" field.
	NetworkUserid string `json:"network_userid,omitempty"`
	// DomainSessionid holds the value of the "domain_sessionid" field.
	DomainSessionid int `json:"domain_sessionid,omitempty"`
	// DomainSessionidx holds the value of the "domain_sessionidx" field.
	DomainSessionidx int `json:"domain_sessionidx,omitempty"`
	// PageViewsInSession holds the value of the "page_views_in_session" field.
	PageViewsInSession int `json:"page_views_in_session,omitempty"`
	// PageViewInSessionIndex holds the value of the "page_view_in_session_index" field.
	PageViewInSessionIndex int `json:"page_view_in_session_index,omitempty"`
	// EngagedTimeInS holds the value of the "engaged_time_in_s" field.
	EngagedTimeInS int `json:"engaged_time_in_s,omitempty"`
	// PageURL holds the value of the "page_url" field.
	PageURL string `json:"page_url,omitempty"`
	// PageTitle holds the value of the "page_title" field.
	PageTitle string `json:"page_title,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PageView) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case pageview.FieldSyncedToCustomerOs:
			values[i] = new(sql.NullBool)
		case pageview.FieldID, pageview.FieldDomainSessionid, pageview.FieldDomainSessionidx, pageview.FieldPageViewsInSession, pageview.FieldPageViewInSessionIndex, pageview.FieldEngagedTimeInS:
			values[i] = new(sql.NullInt64)
		case pageview.FieldAppID, pageview.FieldNameTracker, pageview.FieldTenant, pageview.FieldPageViewID, pageview.FieldEventID, pageview.FieldVisitorID, pageview.FieldCustomerOsContactID, pageview.FieldDomainUserid, pageview.FieldNetworkUserid, pageview.FieldPageURL, pageview.FieldPageTitle:
			values[i] = new(sql.NullString)
		case pageview.FieldStartTstamp, pageview.FieldEndTstamp:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type PageView", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PageView fields.
func (pv *PageView) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case pageview.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pv.ID = int(value.Int64)
		case pageview.FieldAppID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value.Valid {
				pv.AppID = value.String
			}
		case pageview.FieldNameTracker:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name_tracker", values[i])
			} else if value.Valid {
				pv.NameTracker = value.String
			}
		case pageview.FieldTenant:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field tenant", values[i])
			} else if value.Valid {
				pv.Tenant = value.String
			}
		case pageview.FieldPageViewID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field page_view_id", values[i])
			} else if value.Valid {
				pv.PageViewID = value.String
			}
		case pageview.FieldEventID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field event_id", values[i])
			} else if value.Valid {
				pv.EventID = value.String
			}
		case pageview.FieldSyncedToCustomerOs:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field synced_to_customer_os", values[i])
			} else if value.Valid {
				pv.SyncedToCustomerOs = value.Bool
			}
		case pageview.FieldStartTstamp:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field start_tstamp", values[i])
			} else if value.Valid {
				pv.StartTstamp = value.Time
			}
		case pageview.FieldEndTstamp:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field end_tstamp", values[i])
			} else if value.Valid {
				pv.EndTstamp = value.Time
			}
		case pageview.FieldVisitorID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field visitor_id", values[i])
			} else if value.Valid {
				pv.VisitorID = value.String
			}
		case pageview.FieldCustomerOsContactID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field customer_os_contact_id", values[i])
			} else if value.Valid {
				pv.CustomerOsContactID = value.String
			}
		case pageview.FieldDomainUserid:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field domain_userid", values[i])
			} else if value.Valid {
				pv.DomainUserid = value.String
			}
		case pageview.FieldNetworkUserid:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field network_userid", values[i])
			} else if value.Valid {
				pv.NetworkUserid = value.String
			}
		case pageview.FieldDomainSessionid:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field domain_sessionid", values[i])
			} else if value.Valid {
				pv.DomainSessionid = int(value.Int64)
			}
		case pageview.FieldDomainSessionidx:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field domain_sessionidx", values[i])
			} else if value.Valid {
				pv.DomainSessionidx = int(value.Int64)
			}
		case pageview.FieldPageViewsInSession:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field page_views_in_session", values[i])
			} else if value.Valid {
				pv.PageViewsInSession = int(value.Int64)
			}
		case pageview.FieldPageViewInSessionIndex:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field page_view_in_session_index", values[i])
			} else if value.Valid {
				pv.PageViewInSessionIndex = int(value.Int64)
			}
		case pageview.FieldEngagedTimeInS:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field engaged_time_in_s", values[i])
			} else if value.Valid {
				pv.EngagedTimeInS = int(value.Int64)
			}
		case pageview.FieldPageURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field page_url", values[i])
			} else if value.Valid {
				pv.PageURL = value.String
			}
		case pageview.FieldPageTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field page_title", values[i])
			} else if value.Valid {
				pv.PageTitle = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this PageView.
// Note that you need to call PageView.Unwrap() before calling this method if this PageView
// was returned from a transaction, and the transaction was committed or rolled back.
func (pv *PageView) Update() *PageViewUpdateOne {
	return (&PageViewClient{config: pv.config}).UpdateOne(pv)
}

// Unwrap unwraps the PageView entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pv *PageView) Unwrap() *PageView {
	_tx, ok := pv.config.driver.(*txDriver)
	if !ok {
		panic("gen: PageView is not a transactional entity")
	}
	pv.config.driver = _tx.drv
	return pv
}

// String implements the fmt.Stringer.
func (pv *PageView) String() string {
	var builder strings.Builder
	builder.WriteString("PageView(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pv.ID))
	builder.WriteString("app_id=")
	builder.WriteString(pv.AppID)
	builder.WriteString(", ")
	builder.WriteString("name_tracker=")
	builder.WriteString(pv.NameTracker)
	builder.WriteString(", ")
	builder.WriteString("tenant=")
	builder.WriteString(pv.Tenant)
	builder.WriteString(", ")
	builder.WriteString("page_view_id=")
	builder.WriteString(pv.PageViewID)
	builder.WriteString(", ")
	builder.WriteString("event_id=")
	builder.WriteString(pv.EventID)
	builder.WriteString(", ")
	builder.WriteString("synced_to_customer_os=")
	builder.WriteString(fmt.Sprintf("%v", pv.SyncedToCustomerOs))
	builder.WriteString(", ")
	builder.WriteString("start_tstamp=")
	builder.WriteString(pv.StartTstamp.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("end_tstamp=")
	builder.WriteString(pv.EndTstamp.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("visitor_id=")
	builder.WriteString(pv.VisitorID)
	builder.WriteString(", ")
	builder.WriteString("customer_os_contact_id=")
	builder.WriteString(pv.CustomerOsContactID)
	builder.WriteString(", ")
	builder.WriteString("domain_userid=")
	builder.WriteString(pv.DomainUserid)
	builder.WriteString(", ")
	builder.WriteString("network_userid=")
	builder.WriteString(pv.NetworkUserid)
	builder.WriteString(", ")
	builder.WriteString("domain_sessionid=")
	builder.WriteString(fmt.Sprintf("%v", pv.DomainSessionid))
	builder.WriteString(", ")
	builder.WriteString("domain_sessionidx=")
	builder.WriteString(fmt.Sprintf("%v", pv.DomainSessionidx))
	builder.WriteString(", ")
	builder.WriteString("page_views_in_session=")
	builder.WriteString(fmt.Sprintf("%v", pv.PageViewsInSession))
	builder.WriteString(", ")
	builder.WriteString("page_view_in_session_index=")
	builder.WriteString(fmt.Sprintf("%v", pv.PageViewInSessionIndex))
	builder.WriteString(", ")
	builder.WriteString("engaged_time_in_s=")
	builder.WriteString(fmt.Sprintf("%v", pv.EngagedTimeInS))
	builder.WriteString(", ")
	builder.WriteString("page_url=")
	builder.WriteString(pv.PageURL)
	builder.WriteString(", ")
	builder.WriteString("page_title=")
	builder.WriteString(pv.PageTitle)
	builder.WriteByte(')')
	return builder.String()
}

// PageViews is a parsable slice of PageView.
type PageViews []*PageView

func (pv PageViews) config(cfg config) {
	for _i := range pv {
		pv[_i].config = cfg
	}
}
